// This file is auto-generated by @hey-api/openapi-ts

export const IscrizioneEventoEditModelSchema = {
    required: ['idPersona', 'questionari', 'servizi'],
    type: 'object',
    properties: {
        idPersona: {
            type: 'string',
            format: 'uuid'
        },
        questionari: {
            type: 'object',
            additionalProperties: {
                '$ref': '#/components/schemas/RisposteQuestionario'
            }
        },
        servizi: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        confirmed: {
            type: 'boolean'
        }
    }
} as const;

export const RisposteQuestionarioSchema = {
    required: ['risposte'],
    type: 'object',
    properties: {
        risposte: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        submittedAt: {
            type: 'string',
            format: 'date-time'
        },
        submittedBy: {
            type: 'string',
            format: 'uuid'
        }
    }
} as const;

export const CommentIscrizioneEditModelSchema = {
    type: 'object',
    properties: {
        comment: {
            type: 'string'
        },
        sendEmail: {
            type: 'boolean'
        }
    }
} as const;

export const PersonaCreateModelSchema = {
    required: ['cap', 'cognome', 'comune', 'dataNascita', 'email', 'incarico', 'indirizzo', 'luogoNascita', 'nome', 'provincia'],
    type: 'object',
    properties: {
        nome: {
            type: 'string'
        },
        cognome: {
            type: 'string'
        },
        alias: {
            type: 'string'
        },
        indirizzo: {
            type: 'string'
        },
        comune: {
            type: 'string'
        },
        provincia: {
            type: 'string'
        },
        cap: {
            type: 'string'
        },
        luogoNascita: {
            type: 'string'
        },
        provinciaNascita: {
            type: 'string'
        },
        telefono: {
            type: 'string'
        },
        email: {
            type: 'string'
        },
        telefono2: {
            type: 'string'
        },
        email2: {
            type: 'string'
        },
        sesso: {
            type: 'string'
        },
        emailConsent: {
            type: 'boolean'
        },
        codiceFiscale: {
            type: 'string'
        },
        dataNascita: {
            type: 'string'
        },
        incarico: {
            type: 'string'
        },
        gruppo: {
            type: 'string',
            format: 'uuid'
        }
    }
} as const;

export const IncaricoCreateModelSchema = {
    required: ['tipoIncarico'],
    type: 'object',
    properties: {
        tipoIncarico: {
            type: 'string'
        },
        idGruppo: {
            type: 'string',
            format: 'uuid'
        }
    }
} as const;

export const PersonaFiltersSchema = {
    type: 'object',
    properties: {
        tessera: {
            type: 'string'
        },
        sezione: {
            type: 'string'
        },
        nome: {
            type: 'string'
        },
        incarico: {
            type: 'string'
        }
    }
} as const;

export const IncaricoViewModelSchema = {
    required: ['id', 'idPersona', 'idTipoIncarico', 'inizio', 'terminato'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        inizio: {
            type: 'string'
        },
        fine: {
            type: 'string'
        },
        idTipoIncarico: {
            type: 'string'
        },
        idPersona: {
            type: 'string',
            format: 'uuid'
        },
        idCompagine: {
            type: 'string',
            format: 'uuid'
        },
        compagineType: {
            type: 'string',
            enum: ['NAZIONALE', 'SEZIONE', 'GRUPPO', 'UNITA']
        },
        gruppo: {
            type: 'integer',
            format: 'int32'
        },
        terminato: {
            type: 'boolean'
        }
    }
} as const;

export const PersonaViewModelSchema = {
    required: ['cap', 'codiceFiscale', 'cognome', 'comune', 'dataNascita', 'id', 'incarichiCorrenti', 'indirizzo', 'luogoNascita', 'nome', 'provincia', 'talenti'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        tessera: {
            type: 'integer',
            format: 'int32'
        },
        nome: {
            type: 'string'
        },
        alias: {
            type: 'string'
        },
        cognome: {
            type: 'string'
        },
        indirizzo: {
            type: 'string'
        },
        comune: {
            type: 'string'
        },
        provincia: {
            type: 'string'
        },
        cap: {
            type: 'string'
        },
        dataNascita: {
            type: 'string'
        },
        luogoNascita: {
            type: 'string'
        },
        provinciaNascita: {
            type: 'string'
        },
        codiceFiscale: {
            type: 'string'
        },
        telefono: {
            type: 'string'
        },
        email: {
            type: 'string'
        },
        telefono2: {
            type: 'string'
        },
        email2: {
            type: 'string'
        },
        sesso: {
            type: 'string'
        },
        incarichiCorrenti: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/IncaricoViewModel'
            }
        },
        lastTesseramento: {
            '$ref': '#/components/schemas/TesseramentoViewModel'
        },
        avatar: {
            type: 'string'
        },
        primaIscrizione: {
            type: 'string',
            format: 'date-time'
        },
        talenti: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TalentoPersonaViewModel'
            }
        }
    }
} as const;

export const TalentoPersonaViewModelSchema = {
    required: ['category', 'createdAt', 'idPersona', 'idTalento', 'name'],
    type: 'object',
    properties: {
        idTalento: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string'
        },
        category: {
            type: 'string',
            enum: ['MESTIERI', 'TALENTI', 'STEM', 'ARTE', 'SERVIZI', 'SPORT', 'TECNICHE']
        },
        idPersona: {
            type: 'string',
            format: 'uuid'
        },
        createdAt: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const TesseramentoViewModelSchema = {
    required: ['annoScout', 'attesa', 'confermato', 'id', 'idPersona', 'idSezione', 'nomeSezione', 'nuovo', 'rientro', 'temporaneo'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        idSezione: {
            type: 'string',
            format: 'uuid'
        },
        nomeSezione: {
            type: 'string'
        },
        temporaneo: {
            type: 'boolean'
        },
        attesa: {
            type: 'boolean'
        },
        nuovo: {
            type: 'boolean'
        },
        rientro: {
            type: 'boolean'
        },
        inizioProva: {
            type: 'string',
            format: 'date'
        },
        annoScout: {
            type: 'string'
        },
        idPersona: {
            type: 'string',
            format: 'uuid'
        },
        confermato: {
            type: 'boolean'
        },
        tipo: {
            type: 'string',
            enum: ['GIOVANE', 'ADULTO', 'SOSTENITORE']
        },
        dataCreazione: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const ResetPasswordModelSchema = {
    required: ['epochSecond', 'newPassword', 'tessera', 'token'],
    type: 'object',
    properties: {
        tessera: {
            type: 'number'
        },
        token: {
            type: 'string'
        },
        epochSecond: {
            type: 'number'
        },
        newPassword: {
            type: 'string'
        }
    }
} as const;

export const OrderLinkSchema = {
    required: ['href', 'method', 'rel'],
    type: 'object',
    properties: {
        href: {
            type: 'string'
        },
        rel: {
            type: 'string'
        },
        method: {
            type: 'string'
        }
    }
} as const;

export const OrderViewModelSchema = {
    required: ['id', 'links', 'status'],
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        status: {
            type: 'string'
        },
        links: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OrderLink'
            }
        }
    }
} as const;

export const ApproveDataModelSchema = {
    type: 'object',
    properties: {
        billingToken: {
            type: 'string'
        },
        facilitatorAccessToken: {
            type: 'string'
        },
        orderID: {
            type: 'string'
        },
        payerID: {
            type: 'string'
        },
        paymentID: {
            type: 'string'
        },
        subscriptionID: {
            type: 'string'
        },
        authCode: {
            type: 'string'
        }
    }
} as const;

export const CampoScuolaEditModelSchema = {
    required: ['endDate', 'name', 'startDate'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        startDate: {
            type: 'string',
            format: 'date'
        },
        endDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const CorsoEditModelSchema = {
    required: ['livello', 'name'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        livello: {
            type: 'string',
            enum: ['ASSOCIATIVO', 'LEADERSHIP', 'METODOLOGICO_L', 'METODOLOGICO_E', 'METODOLOGICO_R', 'PROGRAMMAZIONE_EDUCATIVA', 'COORDS', 'CDS', 'CG', 'PSEZ', 'WOOD_BADGE']
        }
    }
} as const;

export const AddStaffModelSchema = {
    required: ['idPersona'],
    type: 'object',
    properties: {
        idPersona: {
            type: 'string',
            format: 'uuid'
        },
        incarico: {
            type: 'string',
            writeOnly: true
        },
        idCorso: {
            type: 'string',
            format: 'uuid',
            writeOnly: true
        }
    }
} as const;

export const BrevettoSchema = {
    required: ['creatore', 'id', 'idCreatore', 'idPersona', 'obtainedAt', 'persona'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        obtainedAt: {
            type: 'string',
            format: 'date'
        },
        idPersona: {
            type: 'string',
            format: 'uuid'
        },
        persona: {
            '$ref': '#/components/schemas/Persona'
        },
        idCreatore: {
            type: 'string',
            format: 'uuid'
        },
        creatore: {
            '$ref': '#/components/schemas/Persona'
        }
    }
} as const;

export const GruppoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        idSezione: {
            type: 'string',
            format: 'uuid'
        },
        sezione: {
            '$ref': '#/components/schemas/Sezione'
        },
        numero: {
            type: 'integer',
            format: 'int32'
        },
        unita: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Unita'
            }
        }
    }
} as const;

export const IncaricoSchema = {
    required: ['id', 'idPersona', 'idTipoIncarico', 'inizio', 'isTerminato', 'persona', 'tipoIncarico'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        idPersona: {
            type: 'string',
            format: 'uuid'
        },
        persona: {
            '$ref': '#/components/schemas/Persona'
        },
        idTipoIncarico: {
            type: 'string'
        },
        tipoIncarico: {
            '$ref': '#/components/schemas/TipoIncarico'
        },
        inizio: {
            type: 'string',
            format: 'date'
        },
        fine: {
            type: 'string',
            format: 'date'
        },
        idCompagine: {
            type: 'string',
            format: 'uuid'
        },
        isTerminato: {
            type: 'boolean'
        }
    }
} as const;

export const IncaricoViewSchema = {
    required: ['compagineType', 'id', 'idPersona', 'idTipoIncarico', 'inizio', 'persona', 'tipoIncarico'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        idCompagine: {
            type: 'string',
            format: 'uuid'
        },
        numeroGruppo: {
            type: 'integer',
            format: 'int32'
        },
        compagineType: {
            type: 'string',
            enum: ['NAZIONALE', 'SEZIONE', 'GRUPPO', 'UNITA']
        },
        inizio: {
            type: 'string',
            format: 'date'
        },
        idTipoIncarico: {
            type: 'string'
        },
        tipoIncarico: {
            '$ref': '#/components/schemas/TipoIncarico'
        },
        idPersona: {
            type: 'string',
            format: 'uuid'
        },
        persona: {
            '$ref': '#/components/schemas/Persona'
        },
        idUnita: {
            type: 'string',
            format: 'uuid'
        },
        idGruppo: {
            type: 'string',
            format: 'uuid'
        },
        idSezione: {
            type: 'string',
            format: 'uuid'
        }
    }
} as const;

export const PersonaSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        tessera: {
            type: 'integer',
            format: 'int32'
        },
        nome: {
            type: 'string'
        },
        alias: {
            type: 'string'
        },
        cognome: {
            type: 'string'
        },
        indirizzo: {
            type: 'string'
        },
        comune: {
            type: 'string'
        },
        provincia: {
            type: 'string'
        },
        cap: {
            type: 'string'
        },
        dataNascita: {
            type: 'string',
            format: 'date'
        },
        luogoNascita: {
            type: 'string'
        },
        provinciaNascita: {
            type: 'string'
        },
        codiceFiscale: {
            type: 'string'
        },
        telefono: {
            type: 'string'
        },
        email: {
            type: 'string'
        },
        telefono2: {
            type: 'string'
        },
        email2: {
            type: 'string'
        },
        sesso: {
            type: 'string',
            enum: ['M', 'F']
        },
        emailConsent: {
            type: 'boolean'
        },
        avatar: {
            type: 'string'
        },
        tesseramenti: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Tesseramento'
            }
        },
        lastTesseramento: {
            '$ref': '#/components/schemas/TesseramentoView'
        },
        incarichi: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Incarico'
            }
        },
        incarichiCorrenti: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/IncaricoView'
            }
        },
        brevetti: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Brevetto'
            }
        },
        talenti: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TalentoPersona'
            }
        },
        primaIscrizione: {
            type: 'string',
            format: 'date-time'
        },
        preferredName: {
            type: 'string'
        },
        lastTesseramentoEntity: {
            '$ref': '#/components/schemas/Tesseramento'
        }
    }
} as const;

export const SezioneSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        nome: {
            type: 'string'
        },
        chiusa: {
            type: 'boolean'
        },
        gruppi: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Gruppo'
            }
        },
        tesseramenti: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Tesseramento'
            }
        }
    }
} as const;

export const TalentoSchema = {
    required: ['category', 'id', 'name'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string'
        },
        category: {
            type: 'string',
            enum: ['MESTIERI', 'TALENTI', 'STEM', 'ARTE', 'SERVIZI', 'SPORT', 'TECNICHE']
        }
    }
} as const;

export const TalentoPersonaSchema = {
    required: ['createdAt', 'idPersona', 'idTalento'],
    type: 'object',
    properties: {
        idPersona: {
            type: 'string',
            format: 'uuid'
        },
        idTalento: {
            type: 'string',
            format: 'uuid'
        },
        persona: {
            '$ref': '#/components/schemas/Persona'
        },
        talento: {
            '$ref': '#/components/schemas/Talento'
        },
        createdAt: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const TesseramentoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        idPersona: {
            type: 'string',
            format: 'uuid'
        },
        persona: {
            '$ref': '#/components/schemas/Persona'
        },
        prezzo: {
            type: 'integer',
            format: 'int64'
        },
        confermato: {
            type: 'boolean'
        },
        dataCreazione: {
            type: 'string',
            format: 'date-time'
        },
        idCreatore: {
            type: 'string',
            format: 'uuid'
        },
        annoScout: {
            type: 'string'
        },
        temporaneo: {
            type: 'boolean'
        },
        attesa: {
            type: 'boolean'
        },
        nuovo: {
            type: 'boolean'
        },
        rientro: {
            type: 'boolean'
        },
        inizioProva: {
            type: 'string',
            format: 'date'
        },
        tipo: {
            type: 'string',
            enum: ['GIOVANE', 'ADULTO', 'SOSTENITORE']
        },
        idSezione: {
            type: 'string',
            format: 'uuid'
        },
        sezione: {
            '$ref': '#/components/schemas/Sezione'
        }
    }
} as const;

export const TesseramentoViewSchema = {
    required: ['attesa', 'confermato', 'id', 'idPersona', 'idSezione', 'nuovo', 'persona', 'rientro', 'sezione', 'temporaneo'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        idPersona: {
            type: 'string',
            format: 'uuid'
        },
        persona: {
            '$ref': '#/components/schemas/Persona'
        },
        confermato: {
            type: 'boolean'
        },
        dataCreazione: {
            type: 'string',
            format: 'date-time'
        },
        idCreatore: {
            type: 'string',
            format: 'uuid'
        },
        annoScout: {
            type: 'string'
        },
        temporaneo: {
            type: 'boolean'
        },
        attesa: {
            type: 'boolean'
        },
        nuovo: {
            type: 'boolean'
        },
        rientro: {
            type: 'boolean'
        },
        inizioProva: {
            type: 'string',
            format: 'date'
        },
        tipo: {
            type: 'string',
            enum: ['GIOVANE', 'ADULTO', 'SOSTENITORE']
        },
        idSezione: {
            type: 'string',
            format: 'uuid'
        },
        sezione: {
            '$ref': '#/components/schemas/Sezione'
        }
    }
} as const;

export const TipoIncaricoSchema = {
    type: 'object',
    properties: {
        sigla: {
            type: 'string'
        },
        nome: {
            type: 'string'
        },
        adulti: {
            type: 'boolean'
        },
        livello: {
            type: 'string',
            enum: ['NAZIONALE', 'SEZIONE', 'GRUPPO', 'UNITA']
        },
        nominabileDa: {
            uniqueItems: true,
            type: 'array',
            items: {
                type: 'string'
            }
        },
        attivo: {
            type: 'boolean'
        }
    }
} as const;

export const UnitaSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        tipo: {
            type: 'string',
            enum: ['BRANCO', 'REPARTO', 'COMPAGNIA']
        },
        idGruppo: {
            type: 'string',
            format: 'uuid'
        },
        gruppo: {
            '$ref': '#/components/schemas/Gruppo'
        }
    }
} as const;

export const AllegatoSchema = {
    required: ['name', 'required'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        supportedExtensions: {
            type: 'string'
        },
        required: {
            type: 'boolean'
        }
    }
} as const;

export const DomandaFormSchema = {
    required: ['opzionale', 'tipo', 'titolo'],
    type: 'object',
    properties: {
        titolo: {
            type: 'string'
        },
        descrizione: {
            type: 'string'
        },
        opzionale: {
            type: 'boolean'
        },
        tipo: {
            type: 'string',
            enum: ['TESTO_BREVE', 'TESTO', 'CHECKBOX', 'NUMERO', 'SELECT', 'DATA']
        },
        opzioni: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    }
} as const;

export const EventoCreateModelSchema = {
    required: ['allegati', 'allegatiRichiesti', 'campoScuola', 'costo', 'fineEvento', 'fineIscrizioni', 'incarichi', 'incarichiResponsabili', 'inizioEvento', 'inizioIscrizioni', 'maxPartecipanti', 'metodiPagamento', 'nome', 'questionari', 'servizi', 'soloAdulti'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        nome: {
            type: 'string'
        },
        descrizione: {
            type: 'string'
        },
        inizioEvento: {
            type: 'string',
            format: 'date'
        },
        fineEvento: {
            type: 'string',
            format: 'date'
        },
        inizioIscrizioni: {
            type: 'string',
            format: 'date'
        },
        fineIscrizioni: {
            type: 'string',
            format: 'date'
        },
        maxPartecipanti: {
            type: 'integer',
            format: 'int32'
        },
        soloAdulti: {
            type: 'boolean'
        },
        costo: {
            type: 'integer',
            format: 'int32'
        },
        incarichi: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        allegati: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        tessereAbilitate: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int64'
            }
        },
        servizi: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ServizioModel'
            }
        },
        metodiPagamento: {
            type: 'array',
            items: {
                type: 'string',
                enum: ['BONIFICO', 'PAYPAL']
            }
        },
        questionari: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Questionario'
            }
        },
        allegatiRichiesti: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Allegato'
            }
        },
        incarichiResponsabili: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        campoScuola: {
            type: 'boolean'
        }
    }
} as const;

export const OpzioneServizioModelSchema = {
    required: ['available', 'costo', 'nome'],
    type: 'object',
    properties: {
        nome: {
            type: 'string'
        },
        costo: {
            type: 'integer',
            format: 'int64'
        },
        counter: {
            type: 'integer',
            format: 'int64'
        },
        available: {
            type: 'boolean'
        },
        onlyIfValues: {
            type: 'object',
            additionalProperties: {
                type: 'object'
            }
        }
    }
} as const;

export const QuestionarioSchema = {
    required: ['domande', 'id', 'incarichiAutorizzati', 'obbligatorio'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        titolo: {
            type: 'string'
        },
        incarichiAutorizzati: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        domande: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DomandaForm'
            }
        },
        obbligatorio: {
            type: 'boolean'
        }
    }
} as const;

export const ServizioModelSchema = {
    type: 'object',
    properties: {
        nome: {
            type: 'string'
        },
        descrizione: {
            type: 'string'
        },
        opzioni: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OpzioneServizioModel'
            }
        }
    }
} as const;

export const SendMailModelSchema = {
    required: ['content', 'subject'],
    type: 'object',
    properties: {
        toRoles: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        toParticipants: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        subject: {
            type: 'string'
        },
        content: {
            type: 'string'
        }
    }
} as const;

export const SendMailResponseSchema = {
    required: ['sent', 'success'],
    type: 'object',
    properties: {
        success: {
            type: 'boolean'
        },
        sent: {
            type: 'integer',
            format: 'int32'
        },
        error: {
            type: 'string'
        }
    }
} as const;

export const CensimentoEditModelSchema = {
    required: ['confirmed', 'idNuovi', 'idRinnovi'],
    type: 'object',
    properties: {
        confirmed: {
            type: 'boolean'
        },
        idRinnovi: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            }
        },
        idNuovi: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            }
        }
    }
} as const;

export const PersonaEditModelSchema = {
    required: ['cap', 'cognome', 'comune', 'email', 'indirizzo', 'luogoNascita', 'nome', 'provincia'],
    type: 'object',
    properties: {
        nome: {
            type: 'string'
        },
        cognome: {
            type: 'string'
        },
        alias: {
            type: 'string'
        },
        indirizzo: {
            type: 'string'
        },
        comune: {
            type: 'string'
        },
        provincia: {
            type: 'string'
        },
        cap: {
            type: 'string'
        },
        luogoNascita: {
            type: 'string'
        },
        provinciaNascita: {
            type: 'string'
        },
        telefono: {
            type: 'string'
        },
        email: {
            type: 'string'
        },
        telefono2: {
            type: 'string'
        },
        email2: {
            type: 'string'
        },
        sesso: {
            type: 'string'
        },
        emailConsent: {
            type: 'boolean'
        },
        codiceFiscale: {
            type: 'string'
        }
    }
} as const;

export const EsitoEditModelSchema = {
    required: ['esitoCampoScuola'],
    type: 'object',
    properties: {
        esitoCampoScuola: {
            type: 'string',
            enum: ['CONSEGUITO', 'FERMATO', 'NON_CONSEGUITO']
        },
        data: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const EventoEditModelSchema = {
    required: ['allegatiRichiesti', 'costo', 'descrizione', 'fineEvento', 'fineIscrizioni', 'incarichi', 'incarichiResponsabili', 'inizioEvento', 'inizioIscrizioni', 'maxPartecipanti', 'nome', 'paypal', 'soloAdulti', 'tessereAbilitate'],
    type: 'object',
    properties: {
        nome: {
            type: 'string'
        },
        descrizione: {
            type: 'string'
        },
        inizioEvento: {
            type: 'string',
            format: 'date'
        },
        fineEvento: {
            type: 'string',
            format: 'date'
        },
        inizioIscrizioni: {
            type: 'string',
            format: 'date'
        },
        fineIscrizioni: {
            type: 'string',
            format: 'date'
        },
        maxPartecipanti: {
            type: 'integer',
            format: 'int32'
        },
        soloAdulti: {
            type: 'boolean'
        },
        costo: {
            type: 'integer',
            format: 'int32'
        },
        incarichi: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        tessereAbilitate: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int64'
            }
        },
        paypal: {
            type: 'boolean'
        },
        allegatiRichiesti: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Allegato'
            }
        },
        incarichiResponsabili: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    }
} as const;

export const IscrizioneEventoAdminViewModelSchema = {
    required: ['allegati', 'confermato', 'id', 'idEvento', 'isValid', 'persona', 'prezzo', 'questionari', 'review', 'servizi'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        idEvento: {
            type: 'string',
            format: 'uuid'
        },
        persona: {
            '$ref': '#/components/schemas/PersonaViewModel'
        },
        questionari: {
            type: 'object',
            additionalProperties: {
                '$ref': '#/components/schemas/RisposteQuestionario'
            }
        },
        servizi: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        allegati: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        dataCreazione: {
            type: 'string',
            format: 'date-time'
        },
        confermato: {
            type: 'boolean'
        },
        prezzo: {
            type: 'number'
        },
        paymentReference: {
            type: 'string'
        },
        review: {
            type: 'boolean'
        },
        reviewComment: {
            type: 'string'
        },
        validationReason: {
            type: 'string'
        },
        corso: {
            type: 'string'
        },
        campoScuola: {
            type: 'string'
        },
        deleteReason: {
            type: 'string'
        },
        deleteTimestamp: {
            type: 'string',
            format: 'date-time'
        },
        isValid: {
            type: 'boolean'
        }
    }
} as const;

export const TipoIncaricoViewModelSchema = {
    required: ['adulti', 'attivo', 'livello', 'nome', 'nominabileDa', 'sigla'],
    type: 'object',
    properties: {
        sigla: {
            type: 'string'
        },
        nome: {
            type: 'string'
        },
        adulti: {
            type: 'boolean'
        },
        livello: {
            type: 'string',
            enum: ['NAZIONALE', 'SEZIONE', 'GRUPPO', 'UNITA']
        },
        nominabileDa: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        attivo: {
            type: 'boolean'
        }
    }
} as const;

export const StatisticheSezioneModelSchema = {
    required: ['age', 'annoScout', 'idSezione', 'nome', 'nuovi', 'rientri', 'rinnovi'],
    type: 'object',
    properties: {
        annoScout: {
            type: 'string'
        },
        idSezione: {
            type: 'string',
            format: 'uuid'
        },
        age: {
            type: 'integer',
            format: 'int32'
        },
        nome: {
            type: 'string'
        },
        nuovi: {
            type: 'integer',
            format: 'int32'
        },
        rientri: {
            type: 'integer',
            format: 'int32'
        },
        rinnovi: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const StatisticheGruppoModelSchema = {
    required: ['annoScout', 'count', 'idSezione', 'idTipoIncarico', 'numero'],
    type: 'object',
    properties: {
        annoScout: {
            type: 'string'
        },
        idSezione: {
            type: 'string',
            format: 'uuid'
        },
        numero: {
            type: 'integer',
            format: 'int32'
        },
        idTipoIncarico: {
            type: 'string'
        },
        count: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const SezioneViewModelSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        nome: {
            type: 'string'
        },
        chiusa: {
            type: 'boolean'
        }
    }
} as const;

export const GruppoViewModelSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        idSezione: {
            type: 'string',
            format: 'uuid'
        },
        numero: {
            type: 'integer',
            format: 'int32'
        }
    }
} as const;

export const SezioneDetailViewModelSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        nome: {
            type: 'string'
        },
        chiusa: {
            type: 'boolean'
        },
        gruppi: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GruppoViewModel'
            }
        }
    }
} as const;

export const AdesioneViewModelSchema = {
    required: ['allegati', 'anno', 'approved', 'form', 'id', 'idSezione', 'submitted'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        idSezione: {
            type: 'string',
            format: 'uuid'
        },
        anno: {
            type: 'number'
        },
        form: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        submitted: {
            type: 'boolean'
        },
        approved: {
            type: 'boolean'
        },
        paymentId: {
            type: 'string'
        },
        statuto: {
            type: 'string'
        },
        lastUpdate: {
            type: 'string',
            format: 'date-time'
        },
        allegati: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    }
} as const;

export const BrevettoFormazioneViewModelSchema = {
    required: ['id', 'idTipo', 'obtainedAt', 'tipo'],
    type: 'object',
    allOf: [
        {
            '$ref': '#/components/schemas/BrevettoViewModel'
        },
        {
            type: 'object',
            properties: {
                tipo: {
                    type: 'string'
                },
                idTipo: {
                    type: 'string'
                },
                progressivo: {
                    type: 'integer',
                    format: 'int32'
                }
            }
        }
    ]
} as const;

export const BrevettoViewModelSchema = {
    title: 'BrevettoViewModel',
    required: ['id', 'obtainedAt'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        obtainedAt: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const PersonaDetailViewModelSchema = {
    required: ['brevetti', 'cap', 'codiceFiscale', 'cognome', 'comune', 'dataNascita', 'editable', 'emailConsent', 'id', 'incarichi', 'incarichiCorrenti', 'indirizzo', 'luogoNascita', 'nome', 'provincia', 'talenti', 'tesseramenti'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        tessera: {
            type: 'integer',
            format: 'int32'
        },
        nome: {
            type: 'string'
        },
        alias: {
            type: 'string'
        },
        cognome: {
            type: 'string'
        },
        indirizzo: {
            type: 'string'
        },
        comune: {
            type: 'string'
        },
        provincia: {
            type: 'string'
        },
        cap: {
            type: 'string'
        },
        dataNascita: {
            type: 'string'
        },
        luogoNascita: {
            type: 'string'
        },
        provinciaNascita: {
            type: 'string'
        },
        codiceFiscale: {
            type: 'string'
        },
        telefono: {
            type: 'string'
        },
        email: {
            type: 'string'
        },
        telefono2: {
            type: 'string'
        },
        email2: {
            type: 'string'
        },
        sesso: {
            type: 'string'
        },
        incarichiCorrenti: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/IncaricoViewModel'
            }
        },
        lastTesseramento: {
            '$ref': '#/components/schemas/TesseramentoViewModel'
        },
        avatar: {
            type: 'string'
        },
        primaIscrizione: {
            type: 'string',
            format: 'date-time'
        },
        talenti: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TalentoPersonaViewModel'
            }
        },
        tesseramenti: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TesseramentoViewModel'
            }
        },
        emailResponsabili: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        incarichi: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/IncaricoViewModel'
            }
        },
        brevetti: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/BrevettoFormazioneViewModel'
                    }
                ]
            }
        },
        emailConsent: {
            type: 'boolean'
        },
        editable: {
            type: 'boolean'
        }
    }
} as const;

export const NotificationViewModelSchema = {
    required: ['description', 'id', 'idPersona', 'params', 'title'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        idPersona: {
            type: 'string',
            format: 'uuid'
        },
        title: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        params: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        action: {
            type: 'string',
            enum: ['SEGNA_PRESENZA']
        }
    }
} as const;

export const CloudFileSchema = {
    required: ['lastModified', 'name', 'url'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        lastModified: {
            type: 'string',
            format: 'date-time'
        },
        url: {
            type: 'string'
        }
    }
} as const;

export const GruppoDetailViewModelSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        idSezione: {
            type: 'string',
            format: 'uuid'
        },
        numero: {
            type: 'integer',
            format: 'int32'
        },
        sezione: {
            '$ref': '#/components/schemas/SezioneViewModel'
        },
        unita: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/UnitaViewModel'
            }
        }
    }
} as const;

export const UnitaViewModelSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        tipo: {
            type: 'string'
        },
        idGruppo: {
            type: 'string',
            format: 'uuid'
        }
    }
} as const;

export const CampoScuolaViewModelSchema = {
    required: ['corsi', 'endDate', 'id', 'name', 'servizi', 'staff', 'startDate'],
    type: 'object',
    properties: {
        name: {
            type: 'string'
        },
        startDate: {
            type: 'string',
            format: 'date'
        },
        endDate: {
            type: 'string',
            format: 'date'
        },
        id: {
            type: 'string',
            format: 'uuid'
        },
        staff: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                enum: ['CAPO_CAMPO', 'DIRETTORE', 'AIUTO_DIRETTORE', 'SEGRETERIA']
            }
        },
        corsi: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CorsoViewModel'
            }
        },
        servizi: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PartecipanteServiziViewModel'
            }
        }
    }
} as const;

export const CorsoViewModelSchema = {
    required: ['id', 'livello', 'name', 'partecipanti', 'staff'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string'
        },
        livello: {
            type: 'string',
            enum: ['ASSOCIATIVO', 'LEADERSHIP', 'METODOLOGICO_L', 'METODOLOGICO_E', 'METODOLOGICO_R', 'PROGRAMMAZIONE_EDUCATIVA', 'COORDS', 'CDS', 'CG', 'PSEZ', 'WOOD_BADGE']
        },
        staff: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                enum: ['CAPO_CORSO', 'FORMATORE', 'ALIF']
            }
        },
        partecipanti: {
            type: 'number'
        }
    }
} as const;

export const PartecipanteServiziViewModelSchema = {
    required: ['id', 'persona', 'presente'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        presente: {
            type: 'boolean'
        },
        persona: {
            '$ref': '#/components/schemas/PersonaViewModel'
        },
        tipo: {
            type: 'string',
            enum: ['CAPO_CAMPO', 'CAPO_CORSO', 'COORGANIZZATORE', 'DIRETTORE', 'FORMATORE', 'OSSERVATORE', 'PARTECIPANTE', 'RELATORE_ESTERNO', 'RELATORE_INTERNO', 'RESPONSABILE_DECENTRATO', 'RESPONSABILE_EVENTO_FORMATIVO', 'AIUTO_RESPONSABILE_EVENTO_FORMATIVO', 'REFERENTE_SERVIZI', 'ANIMAZIONE', 'BAR', 'CUCINA', 'FOTOGRAFIA', 'KINDERGARTEN', 'LOGISTICA', 'REFERENTE_PLENARIES', 'SANITÀ', 'SEGRETERIA', 'SERVIZI_GENERALI', 'VICE_CAPO_CAMPO', 'VICE_DIRETTORE', 'LISTENING_EAR', 'PULIZIA_ED_IGIENE', 'ALIF']
        }
    }
} as const;

export const CorsoDetailViewModelSchema = {
    required: ['id', 'livello', 'name', 'partecipanti', 'staff'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string'
        },
        livello: {
            type: 'string',
            enum: ['ASSOCIATIVO', 'LEADERSHIP', 'METODOLOGICO_L', 'METODOLOGICO_E', 'METODOLOGICO_R', 'PROGRAMMAZIONE_EDUCATIVA', 'COORDS', 'CDS', 'CG', 'PSEZ', 'WOOD_BADGE']
        },
        staff: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                enum: ['CAPO_CORSO', 'FORMATORE', 'ALIF']
            }
        },
        partecipanti: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PartecipanteCorsoViewModel'
            }
        }
    }
} as const;

export const IscrizioneEventoViewModelSchema = {
    required: ['allegati', 'confermato', 'dataCreazione', 'id', 'idEvento', 'persona', 'prezzo', 'questionari', 'review', 'servizi'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        idEvento: {
            type: 'string',
            format: 'uuid'
        },
        persona: {
            '$ref': '#/components/schemas/PersonaViewModel'
        },
        questionari: {
            type: 'object',
            additionalProperties: {
                '$ref': '#/components/schemas/RisposteQuestionario'
            }
        },
        servizi: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        allegati: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        dataCreazione: {
            type: 'string',
            format: 'date-time'
        },
        confermato: {
            type: 'boolean'
        },
        review: {
            type: 'boolean'
        },
        prezzo: {
            type: 'integer',
            format: 'int64'
        },
        validationReason: {
            type: 'string'
        },
        paymentReference: {
            type: 'string'
        },
        meta: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        deleteReason: {
            type: 'string'
        },
        deleteTimestamp: {
            type: 'string',
            format: 'date-time'
        },
        valid: {
            type: 'boolean'
        }
    }
} as const;

export const PartecipanteCorsoViewModelSchema = {
    required: ['commenti', 'corso', 'iscrizione', 'persona', 'presente'],
    type: 'object',
    properties: {
        corso: {
            '$ref': '#/components/schemas/CorsoViewModel'
        },
        iscrizione: {
            '$ref': '#/components/schemas/IscrizioneEventoViewModel'
        },
        commenti: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        esito: {
            type: 'string',
            enum: ['CONSEGUITO', 'FERMATO', 'NON_CONSEGUITO']
        },
        dataConseguimento: {
            type: 'string',
            format: 'date'
        },
        presente: {
            type: 'boolean'
        },
        persona: {
            '$ref': '#/components/schemas/PersonaViewModel'
        }
    }
} as const;

export const PartecipanteCorsoCommentoViewModelSchema = {
    required: ['campo', 'commenti', 'corso', 'id', 'iscrizione', 'persona', 'presente'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        corso: {
            '$ref': '#/components/schemas/CorsoViewModel'
        },
        iscrizione: {
            '$ref': '#/components/schemas/IscrizioneEventoViewModel'
        },
        commenti: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        esito: {
            type: 'string',
            enum: ['CONSEGUITO', 'FERMATO', 'NON_CONSEGUITO']
        },
        dataConseguimento: {
            type: 'string',
            format: 'date'
        },
        presente: {
            type: 'boolean'
        },
        persona: {
            '$ref': '#/components/schemas/PersonaViewModel'
        },
        campo: {
            '$ref': '#/components/schemas/CampoScuolaViewModel'
        }
    }
} as const;

export const EventoViewModelSchema = {
    required: ['fineEvento', 'fineIscrizioni', 'id', 'inizioEvento', 'inizioIscrizioni', 'iscrizioniCount', 'maxPartecipanti', 'metodiPagamento', 'nome', 'tipo'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        nome: {
            type: 'string'
        },
        descrizione: {
            type: 'string'
        },
        inizioEvento: {
            type: 'string',
            format: 'date'
        },
        fineEvento: {
            type: 'string',
            format: 'date'
        },
        inizioIscrizioni: {
            type: 'string',
            format: 'date'
        },
        fineIscrizioni: {
            type: 'string',
            format: 'date'
        },
        maxPartecipanti: {
            type: 'integer',
            format: 'int32'
        },
        iscrizioniCount: {
            type: 'integer',
            format: 'int32'
        },
        metodiPagamento: {
            type: 'array',
            items: {
                type: 'string',
                enum: ['BONIFICO', 'PAYPAL']
            }
        },
        tessereAbilitate: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int64'
            }
        },
        tessereRitardatari: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int64'
            }
        },
        tipo: {
            type: 'string',
            enum: ['GIOVANI', 'ADULTI', 'FORMAZIONE', 'SERVIZI']
        }
    }
} as const;

export const EventoDetailViewModelSchema = {
    required: ['allegati', 'allegatiRichiesti', 'costo', 'descrizione', 'fineEvento', 'fineIscrizioni', 'id', 'incarichi', 'inizioEvento', 'inizioIscrizioni', 'iscritti', 'iscrizioni', 'maxPartecipanti', 'metodiPagamento', 'nome', 'questionari', 'servizi', 'soloAdulti'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        nome: {
            type: 'string'
        },
        descrizione: {
            type: 'string'
        },
        inizioEvento: {
            type: 'string',
            format: 'date'
        },
        fineEvento: {
            type: 'string',
            format: 'date'
        },
        inizioIscrizioni: {
            type: 'string',
            format: 'date'
        },
        fineIscrizioni: {
            type: 'string',
            format: 'date'
        },
        maxPartecipanti: {
            type: 'integer',
            format: 'int32'
        },
        iscritti: {
            type: 'integer',
            format: 'int32'
        },
        soloAdulti: {
            type: 'boolean'
        },
        costo: {
            type: 'integer',
            format: 'int32'
        },
        servizi: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ServizioModel'
            }
        },
        incarichi: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        questionari: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Questionario'
            }
        },
        iscrizioni: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/IscrizioneEventoViewModel'
            }
        },
        metodiPagamento: {
            type: 'array',
            items: {
                type: 'string',
                enum: ['BONIFICO', 'PAYPAL']
            }
        },
        allegatiRichiesti: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Allegato'
            }
        },
        allegati: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        tessereAbilitate: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int64'
            }
        },
        tessereRitardatari: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int64'
            }
        },
        campoScuola: {
            type: 'boolean'
        }
    }
} as const;

export const ApplicationContextSchema = {
    type: 'object',
    properties: {
        parent: {
            '$ref': '#/components/schemas/ApplicationContext'
        },
        id: {
            type: 'string'
        },
        displayName: {
            type: 'string'
        },
        autowireCapableBeanFactory: {
            '$ref': '#/components/schemas/AutowireCapableBeanFactory'
        },
        applicationName: {
            type: 'string'
        },
        startupDate: {
            type: 'integer',
            format: 'int64'
        },
        environment: {
            '$ref': '#/components/schemas/Environment'
        },
        beanDefinitionCount: {
            type: 'integer',
            format: 'int32'
        },
        beanDefinitionNames: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        parentBeanFactory: {
            '$ref': '#/components/schemas/BeanFactory'
        },
        classLoader: {
            type: 'object',
            properties: {
                name: {
                    type: 'string'
                },
                registeredAsParallelCapable: {
                    type: 'boolean'
                },
                parent: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        },
                        registeredAsParallelCapable: {
                            type: 'boolean'
                        },
                        unnamedModule: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string'
                                },
                                classLoader: {
                                    type: 'object',
                                    properties: {
                                        name: {
                                            type: 'string'
                                        },
                                        registeredAsParallelCapable: {
                                            type: 'boolean'
                                        },
                                        definedPackages: {
                                            type: 'array',
                                            items: {
                                                type: 'object',
                                                properties: {
                                                    name: {
                                                        type: 'string'
                                                    },
                                                    annotations: {
                                                        type: 'array',
                                                        items: {
                                                            type: 'object'
                                                        }
                                                    },
                                                    declaredAnnotations: {
                                                        type: 'array',
                                                        items: {
                                                            type: 'object'
                                                        }
                                                    },
                                                    sealed: {
                                                        type: 'boolean'
                                                    },
                                                    specificationTitle: {
                                                        type: 'string'
                                                    },
                                                    specificationVersion: {
                                                        type: 'string'
                                                    },
                                                    specificationVendor: {
                                                        type: 'string'
                                                    },
                                                    implementationTitle: {
                                                        type: 'string'
                                                    },
                                                    implementationVersion: {
                                                        type: 'string'
                                                    },
                                                    implementationVendor: {
                                                        type: 'string'
                                                    }
                                                }
                                            }
                                        },
                                        defaultAssertionStatus: {
                                            type: 'boolean',
                                            writeOnly: true
                                        }
                                    }
                                },
                                descriptor: {
                                    type: 'object',
                                    properties: {
                                        open: {
                                            type: 'boolean'
                                        },
                                        automatic: {
                                            type: 'boolean'
                                        }
                                    }
                                },
                                named: {
                                    type: 'boolean'
                                },
                                annotations: {
                                    type: 'array',
                                    items: {
                                        type: 'object'
                                    }
                                },
                                declaredAnnotations: {
                                    type: 'array',
                                    items: {
                                        type: 'object'
                                    }
                                },
                                packages: {
                                    uniqueItems: true,
                                    type: 'array',
                                    items: {
                                        type: 'string'
                                    }
                                },
                                nativeAccessEnabled: {
                                    type: 'boolean'
                                },
                                layer: {
                                    type: 'object'
                                }
                            }
                        },
                        definedPackages: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    name: {
                                        type: 'string'
                                    },
                                    annotations: {
                                        type: 'array',
                                        items: {
                                            type: 'object'
                                        }
                                    },
                                    declaredAnnotations: {
                                        type: 'array',
                                        items: {
                                            type: 'object'
                                        }
                                    },
                                    sealed: {
                                        type: 'boolean'
                                    },
                                    specificationTitle: {
                                        type: 'string'
                                    },
                                    specificationVersion: {
                                        type: 'string'
                                    },
                                    specificationVendor: {
                                        type: 'string'
                                    },
                                    implementationTitle: {
                                        type: 'string'
                                    },
                                    implementationVersion: {
                                        type: 'string'
                                    },
                                    implementationVendor: {
                                        type: 'string'
                                    }
                                }
                            }
                        },
                        defaultAssertionStatus: {
                            type: 'boolean',
                            writeOnly: true
                        }
                    }
                },
                unnamedModule: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        },
                        classLoader: {
                            type: 'object',
                            properties: {
                                name: {
                                    type: 'string'
                                },
                                registeredAsParallelCapable: {
                                    type: 'boolean'
                                },
                                definedPackages: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        properties: {
                                            name: {
                                                type: 'string'
                                            },
                                            annotations: {
                                                type: 'array',
                                                items: {
                                                    type: 'object'
                                                }
                                            },
                                            declaredAnnotations: {
                                                type: 'array',
                                                items: {
                                                    type: 'object'
                                                }
                                            },
                                            sealed: {
                                                type: 'boolean'
                                            },
                                            specificationTitle: {
                                                type: 'string'
                                            },
                                            specificationVersion: {
                                                type: 'string'
                                            },
                                            specificationVendor: {
                                                type: 'string'
                                            },
                                            implementationTitle: {
                                                type: 'string'
                                            },
                                            implementationVersion: {
                                                type: 'string'
                                            },
                                            implementationVendor: {
                                                type: 'string'
                                            }
                                        }
                                    }
                                },
                                defaultAssertionStatus: {
                                    type: 'boolean',
                                    writeOnly: true
                                }
                            }
                        },
                        descriptor: {
                            type: 'object',
                            properties: {
                                open: {
                                    type: 'boolean'
                                },
                                automatic: {
                                    type: 'boolean'
                                }
                            }
                        },
                        named: {
                            type: 'boolean'
                        },
                        annotations: {
                            type: 'array',
                            items: {
                                type: 'object'
                            }
                        },
                        declaredAnnotations: {
                            type: 'array',
                            items: {
                                type: 'object'
                            }
                        },
                        packages: {
                            uniqueItems: true,
                            type: 'array',
                            items: {
                                type: 'string'
                            }
                        },
                        nativeAccessEnabled: {
                            type: 'boolean'
                        },
                        layer: {
                            type: 'object'
                        }
                    }
                },
                definedPackages: {
                    type: 'array',
                    items: {
                        type: 'object',
                        properties: {
                            name: {
                                type: 'string'
                            },
                            annotations: {
                                type: 'array',
                                items: {
                                    type: 'object'
                                }
                            },
                            declaredAnnotations: {
                                type: 'array',
                                items: {
                                    type: 'object'
                                }
                            },
                            sealed: {
                                type: 'boolean'
                            },
                            specificationTitle: {
                                type: 'string'
                            },
                            specificationVersion: {
                                type: 'string'
                            },
                            specificationVendor: {
                                type: 'string'
                            },
                            implementationTitle: {
                                type: 'string'
                            },
                            implementationVersion: {
                                type: 'string'
                            },
                            implementationVendor: {
                                type: 'string'
                            }
                        }
                    }
                },
                defaultAssertionStatus: {
                    type: 'boolean',
                    writeOnly: true
                }
            }
        }
    }
} as const;

export const AutowireCapableBeanFactorySchema = {
    type: 'object'
} as const;

export const BeanFactorySchema = {
    type: 'object'
} as const;

export const CampoScuolaSchema = {
    required: ['corsi', 'endDate', 'id', 'name', 'servizi', 'staff', 'startDate'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string'
        },
        startDate: {
            type: 'string',
            format: 'date'
        },
        endDate: {
            type: 'string',
            format: 'date'
        },
        staff: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                enum: ['CAPO_CAMPO', 'DIRETTORE', 'AIUTO_DIRETTORE', 'SEGRETERIA']
            }
        },
        corsi: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Corso'
            }
        },
        servizi: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PartecipanteServizi'
            }
        }
    }
} as const;

export const CorsoSchema = {
    required: ['campoScuola', 'id', 'idCampoScuola', 'livello', 'name', 'partecipanti', 'staff'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        name: {
            type: 'string'
        },
        livello: {
            type: 'string',
            enum: ['ASSOCIATIVO', 'LEADERSHIP', 'METODOLOGICO_L', 'METODOLOGICO_E', 'METODOLOGICO_R', 'PROGRAMMAZIONE_EDUCATIVA', 'COORDS', 'CDS', 'CG', 'PSEZ', 'WOOD_BADGE']
        },
        staff: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                enum: ['CAPO_CORSO', 'FORMATORE', 'ALIF']
            }
        },
        idCampoScuola: {
            type: 'string',
            format: 'uuid'
        },
        campoScuola: {
            '$ref': '#/components/schemas/CampoScuola'
        },
        partecipanti: {
            uniqueItems: true,
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PartecipanteCorso'
            }
        }
    }
} as const;

export const EnvironmentSchema = {
    type: 'object',
    properties: {
        activeProfiles: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        defaultProfiles: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    }
} as const;

export const EventoSchema = {
    required: ['config', 'costo', 'fineEvento', 'fineIscrizioni', 'id', 'inizioEvento', 'inizioIscrizioni', 'isCampoScuola', 'iscrizioni', 'maxPartecipanti', 'nome', 'questionari', 'soloAdulti', 'tessereAdmin', 'tessereMod', 'tessereRitardatari'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        nome: {
            type: 'string'
        },
        descrizione: {
            type: 'string'
        },
        inizioEvento: {
            type: 'string',
            format: 'date'
        },
        fineEvento: {
            type: 'string',
            format: 'date'
        },
        inizioIscrizioni: {
            type: 'string',
            format: 'date'
        },
        fineIscrizioni: {
            type: 'string',
            format: 'date'
        },
        maxPartecipanti: {
            type: 'integer',
            format: 'int32'
        },
        soloAdulti: {
            type: 'boolean'
        },
        costo: {
            type: 'integer',
            format: 'int32'
        },
        incarichi: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        allegati: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        iscrizioni: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/IscrizioneEvento'
            }
        },
        tessereAbilitate: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int64'
            }
        },
        tessereRitardatari: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int64'
            }
        },
        tessereAdmin: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int64'
            }
        },
        tessereMod: {
            type: 'array',
            items: {
                type: 'integer',
                format: 'int64'
            }
        },
        notificationEmail: {
            type: 'string'
        },
        config: {
            '$ref': '#/components/schemas/EventoConfig'
        },
        questionari: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Questionario'
            }
        },
        isCampoScuola: {
            type: 'boolean'
        }
    }
} as const;

export const EventoConfigSchema = {
    type: 'object',
    properties: {
        servizi: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Servizio'
            }
        },
        questionari: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Questionario'
            }
        },
        allegatiRichiesti: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Allegato'
            }
        },
        metodiPagamento: {
            type: 'array',
            items: {
                type: 'string',
                enum: ['BONIFICO', 'PAYPAL']
            }
        },
        incarichiResponsabili: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    }
} as const;

export const InversoSchema = {
    type: 'object',
    allOf: [
        {
            '$ref': '#/components/schemas/Vincolo'
        },
        {
            type: 'object',
            properties: {
                servizio: {
                    type: 'string'
                }
            }
        }
    ]
} as const;

export const IscrizioneEventoSchema = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        idPersona: {
            type: 'string',
            format: 'uuid'
        },
        persona: {
            '$ref': '#/components/schemas/Persona'
        },
        prezzo: {
            type: 'integer',
            format: 'int64'
        },
        confermato: {
            type: 'boolean'
        },
        dataCreazione: {
            type: 'string',
            format: 'date-time'
        },
        idCreatore: {
            type: 'string',
            format: 'uuid'
        },
        idEvento: {
            type: 'string',
            format: 'uuid'
        },
        evento: {
            '$ref': '#/components/schemas/Evento'
        },
        questionari: {
            type: 'object',
            additionalProperties: {
                '$ref': '#/components/schemas/RisposteQuestionario'
            }
        },
        servizi: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        allegati: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        meta: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        paymentReference: {
            type: 'string'
        },
        review: {
            type: 'boolean'
        },
        reviewComment: {
            type: 'string'
        },
        partecipazione: {
            '$ref': '#/components/schemas/PartecipanteCorso'
        },
        servizio: {
            '$ref': '#/components/schemas/PartecipanteServizi'
        },
        deleteReason: {
            type: 'string'
        },
        deleteTimestamp: {
            type: 'string',
            format: 'date-time'
        }
    }
} as const;

export const NumeroPostiSchema = {
    type: 'object',
    allOf: [
        {
            '$ref': '#/components/schemas/Vincolo'
        },
        {
            type: 'object',
            properties: {
                numeroPosti: {
                    type: 'integer',
                    format: 'int64'
                },
                postiDisponibili: {
                    type: 'integer',
                    format: 'int64'
                }
            }
        }
    ]
} as const;

export const OpzioneServizioSchema = {
    type: 'object',
    properties: {
        nome: {
            type: 'string'
        },
        costo: {
            type: 'integer',
            format: 'int64'
        },
        counter: {
            type: 'integer',
            format: 'int64'
        },
        vincoli: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        '$ref': '#/components/schemas/Inverso'
                    },
                    {
                        '$ref': '#/components/schemas/NumeroPosti'
                    },
                    {
                        '$ref': '#/components/schemas/PostiPerSesso'
                    },
                    {
                        '$ref': '#/components/schemas/PostiPerUnita'
                    }
                ]
            }
        },
        onlyIfValues: {
            type: 'object',
            additionalProperties: {
                type: 'object'
            }
        }
    }
} as const;

export const PartecipanteCorsoSchema = {
    required: ['commenti', 'corso', 'id', 'idCorso', 'idIscrizione', 'iscrizione'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        idCorso: {
            type: 'string',
            format: 'uuid'
        },
        corso: {
            '$ref': '#/components/schemas/Corso'
        },
        idIscrizione: {
            type: 'string',
            format: 'uuid'
        },
        iscrizione: {
            '$ref': '#/components/schemas/IscrizioneEvento'
        },
        presente: {
            type: 'boolean'
        },
        commenti: {
            type: 'object',
            additionalProperties: {
                type: 'string'
            }
        },
        esito: {
            type: 'string',
            enum: ['CONSEGUITO', 'FERMATO', 'NON_CONSEGUITO']
        },
        dataConseguimento: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const PartecipanteServiziSchema = {
    required: ['campoScuola', 'id', 'idCampoScuola', 'idIscrizione', 'iscrizione'],
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid'
        },
        idCampoScuola: {
            type: 'string',
            format: 'uuid'
        },
        campoScuola: {
            '$ref': '#/components/schemas/CampoScuola'
        },
        idIscrizione: {
            type: 'string',
            format: 'uuid'
        },
        iscrizione: {
            '$ref': '#/components/schemas/IscrizioneEvento'
        },
        presente: {
            type: 'boolean'
        },
        tipo: {
            type: 'string',
            enum: ['CAPO_CAMPO', 'CAPO_CORSO', 'COORGANIZZATORE', 'DIRETTORE', 'FORMATORE', 'OSSERVATORE', 'PARTECIPANTE', 'RELATORE_ESTERNO', 'RELATORE_INTERNO', 'RESPONSABILE_DECENTRATO', 'RESPONSABILE_EVENTO_FORMATIVO', 'AIUTO_RESPONSABILE_EVENTO_FORMATIVO', 'REFERENTE_SERVIZI', 'ANIMAZIONE', 'BAR', 'CUCINA', 'FOTOGRAFIA', 'KINDERGARTEN', 'LOGISTICA', 'REFERENTE_PLENARIES', 'SANITÀ', 'SEGRETERIA', 'SERVIZI_GENERALI', 'VICE_CAPO_CAMPO', 'VICE_DIRETTORE', 'LISTENING_EAR', 'PULIZIA_ED_IGIENE', 'ALIF']
        }
    }
} as const;

export const PostiPerSessoSchema = {
    type: 'object',
    allOf: [
        {
            '$ref': '#/components/schemas/Vincolo'
        },
        {
            type: 'object',
            properties: {
                postiMaschi: {
                    type: 'integer',
                    format: 'int64'
                },
                postiFemmine: {
                    type: 'integer',
                    format: 'int64'
                }
            }
        }
    ]
} as const;

export const PostiPerUnitaSchema = {
    type: 'object',
    allOf: [
        {
            '$ref': '#/components/schemas/Vincolo'
        },
        {
            type: 'object',
            properties: {
                applicationContext: {
                    '$ref': '#/components/schemas/ApplicationContext'
                },
                posti: {
                    type: 'integer',
                    format: 'int64'
                }
            }
        }
    ]
} as const;

export const ServizioSchema = {
    type: 'object',
    properties: {
        nome: {
            type: 'string'
        },
        descrizione: {
            type: 'string'
        },
        opzioni: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OpzioneServizio'
            }
        }
    }
} as const;

export const VincoloSchema = {
    required: ['class'],
    type: 'object',
    properties: {
        class: {
            type: 'string'
        }
    },
    discriminator: {
        propertyName: 'class'
    }
} as const;

export const CensimentoViewModelSchema = {
    required: ['annoScout', 'approved', 'confirmed', 'costo', 'createdAt', 'id', 'idNuovi', 'idRinnovi', 'idSezione'],
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        idSezione: {
            type: 'string',
            format: 'uuid'
        },
        idRinnovi: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            }
        },
        idNuovi: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uuid'
            }
        },
        costo: {
            type: 'integer',
            format: 'int64'
        },
        annoScout: {
            type: 'integer',
            format: 'int64'
        },
        paymentId: {
            type: 'string'
        },
        approved: {
            type: 'boolean'
        },
        confirmed: {
            type: 'boolean'
        },
        createdAt: {
            type: 'string',
            format: 'date'
        },
        paymentDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;

export const CensimentoAdminViewModelSchema = {
    required: ['annoScout', 'approved', 'costo', 'createdAt', 'id', 'idSezione', 'nomeSezione'],
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        idSezione: {
            type: 'string',
            format: 'uuid'
        },
        nomeSezione: {
            type: 'string'
        },
        costo: {
            type: 'integer',
            format: 'int64'
        },
        annoScout: {
            type: 'integer',
            format: 'int64'
        },
        paymentId: {
            type: 'string'
        },
        approved: {
            type: 'boolean'
        },
        createdAt: {
            type: 'string',
            format: 'date'
        },
        paymentDate: {
            type: 'string',
            format: 'date'
        }
    }
} as const;