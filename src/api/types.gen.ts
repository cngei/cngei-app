// This file is auto-generated by @hey-api/openapi-ts

export type IscrizioneEventoEditModel = {
    idPersona: string;
    questionari: {
        [key: string]: RisposteQuestionario;
    };
    servizi: Array<(string)>;
    confirmed?: boolean;
};

export type RisposteQuestionario = {
    risposte: {
        [key: string]: (string);
    };
    submittedAt?: string;
    submittedBy?: string;
};

export type CommentIscrizioneEditModel = {
    comment?: string;
    sendEmail?: boolean;
};

export type PersonaCreateModel = {
    nome: string;
    cognome: string;
    alias?: string;
    indirizzo: string;
    comune: string;
    provincia: string;
    cap: string;
    luogoNascita: string;
    provinciaNascita?: string;
    telefono?: string;
    email: string;
    telefono2?: string;
    email2?: string;
    sesso?: string;
    emailConsent?: boolean;
    codiceFiscale?: string;
    dataNascita: string;
    incarico: string;
    gruppo?: string;
};

export type IncaricoCreateModel = {
    tipoIncarico: string;
    idGruppo?: string;
};

export type PersonaFilters = {
    tessera?: string;
    sezione?: string;
    nome?: string;
    incarico?: string;
};

export type IncaricoViewModel = {
    id: string;
    inizio: string;
    fine?: string;
    idTipoIncarico: string;
    idPersona: string;
    idCompagine?: string;
    compagineType?: 'NAZIONALE' | 'SEZIONE' | 'GRUPPO' | 'UNITA';
    gruppo?: number;
    terminato: boolean;
};

export type compagineType = 'NAZIONALE' | 'SEZIONE' | 'GRUPPO' | 'UNITA';

export type PersonaViewModel = {
    id: string;
    tessera?: number;
    nome: string;
    alias?: string;
    cognome: string;
    indirizzo: string;
    comune: string;
    provincia: string;
    cap: string;
    dataNascita: string;
    luogoNascita: string;
    provinciaNascita?: string;
    codiceFiscale: string;
    telefono?: string;
    email?: string;
    telefono2?: string;
    email2?: string;
    sesso?: string;
    incarichiCorrenti: Array<IncaricoViewModel>;
    lastTesseramento?: TesseramentoViewModel;
    avatar?: string;
    primaIscrizione?: string;
    talenti: Array<TalentoPersonaViewModel>;
};

export type TalentoPersonaViewModel = {
    idTalento: string;
    name: string;
    category: 'MESTIERI' | 'TALENTI' | 'STEM' | 'ARTE' | 'SERVIZI' | 'SPORT' | 'TECNICHE';
    idPersona: string;
    createdAt: string;
};

export type category = 'MESTIERI' | 'TALENTI' | 'STEM' | 'ARTE' | 'SERVIZI' | 'SPORT' | 'TECNICHE';

export type TesseramentoViewModel = {
    id: string;
    idSezione: string;
    nomeSezione: string;
    temporaneo: boolean;
    attesa: boolean;
    nuovo: boolean;
    rientro: boolean;
    inizioProva?: string;
    annoScout: string;
    idPersona: string;
    confermato: boolean;
    tipo?: 'GIOVANE' | 'ADULTO' | 'SOSTENITORE';
    dataCreazione?: string;
};

export type tipo = 'GIOVANE' | 'ADULTO' | 'SOSTENITORE';

export type ResetPasswordModel = {
    tessera: number;
    token: string;
    epochSecond: number;
    newPassword: string;
};

export type OrderLink = {
    href: string;
    rel: string;
    method: string;
};

export type OrderViewModel = {
    id: string;
    status: string;
    links: Array<OrderLink>;
};

export type ApproveDataModel = {
    billingToken?: string;
    facilitatorAccessToken?: string;
    orderID?: string;
    payerID?: string;
    paymentID?: string;
    subscriptionID?: string;
    authCode?: string;
};

export type CampoScuolaEditModel = {
    name: string;
    startDate: string;
    endDate: string;
};

export type CorsoEditModel = {
    name: string;
    livello: 'ASSOCIATIVO' | 'LEADERSHIP' | 'METODOLOGICO_L' | 'METODOLOGICO_E' | 'METODOLOGICO_R' | 'PROGRAMMAZIONE_EDUCATIVA' | 'COORDS' | 'CDS' | 'CG' | 'PSEZ' | 'WOOD_BADGE';
};

export type livello = 'ASSOCIATIVO' | 'LEADERSHIP' | 'METODOLOGICO_L' | 'METODOLOGICO_E' | 'METODOLOGICO_R' | 'PROGRAMMAZIONE_EDUCATIVA' | 'COORDS' | 'CDS' | 'CG' | 'PSEZ' | 'WOOD_BADGE';

export type AddStaffModel = {
    idPersona: string;
    incarico?: string;
    idCorso?: string;
};

export type Brevetto = {
    id: string;
    obtainedAt: string;
    idPersona: string;
    persona: Persona;
    idCreatore: string;
    creatore: Persona;
};

export type Gruppo = {
    id?: string;
    idSezione?: string;
    sezione?: Sezione;
    numero?: number;
    unita?: Array<Unita>;
};

export type Incarico = {
    id: string;
    idPersona: string;
    persona: Persona;
    idTipoIncarico: string;
    tipoIncarico: TipoIncarico;
    inizio: string;
    fine?: string;
    idCompagine?: string;
    isTerminato: boolean;
};

export type IncaricoView = {
    id: string;
    idCompagine?: string;
    numeroGruppo?: number;
    compagineType: 'NAZIONALE' | 'SEZIONE' | 'GRUPPO' | 'UNITA';
    inizio: string;
    idTipoIncarico: string;
    tipoIncarico: TipoIncarico;
    idPersona: string;
    persona: Persona;
    idUnita?: string;
    idGruppo?: string;
    idSezione?: string;
};

export type Persona = {
    id?: string;
    tessera?: number;
    nome?: string;
    alias?: string;
    cognome?: string;
    indirizzo?: string;
    comune?: string;
    provincia?: string;
    cap?: string;
    dataNascita?: string;
    luogoNascita?: string;
    provinciaNascita?: string;
    codiceFiscale?: string;
    telefono?: string;
    email?: string;
    telefono2?: string;
    email2?: string;
    sesso?: 'M' | 'F';
    emailConsent?: boolean;
    avatar?: string;
    tesseramenti?: Array<Tesseramento>;
    lastTesseramento?: TesseramentoView;
    incarichi?: Array<Incarico>;
    incarichiCorrenti?: Array<IncaricoView>;
    brevetti?: Array<Brevetto>;
    talenti?: Array<TalentoPersona>;
    primaIscrizione?: string;
    preferredName?: string;
    lastTesseramentoEntity?: Tesseramento;
};

export type sesso = 'M' | 'F';

export type Sezione = {
    id?: string;
    nome?: string;
    chiusa?: boolean;
    gruppi?: Array<Gruppo>;
    tesseramenti?: Array<Tesseramento>;
};

export type Talento = {
    id: string;
    name: string;
    category: 'MESTIERI' | 'TALENTI' | 'STEM' | 'ARTE' | 'SERVIZI' | 'SPORT' | 'TECNICHE';
};

export type TalentoPersona = {
    idPersona: string;
    idTalento: string;
    persona?: Persona;
    talento?: Talento;
    createdAt: string;
};

export type Tesseramento = {
    id?: string;
    idPersona?: string;
    persona?: Persona;
    prezzo?: number;
    confermato?: boolean;
    dataCreazione?: string;
    idCreatore?: string;
    annoScout?: string;
    temporaneo?: boolean;
    attesa?: boolean;
    nuovo?: boolean;
    rientro?: boolean;
    inizioProva?: string;
    tipo?: 'GIOVANE' | 'ADULTO' | 'SOSTENITORE';
    idSezione?: string;
    sezione?: Sezione;
};

export type TesseramentoView = {
    id: string;
    idPersona: string;
    persona: Persona;
    confermato: boolean;
    dataCreazione?: string;
    idCreatore?: string;
    annoScout?: string;
    temporaneo: boolean;
    attesa: boolean;
    nuovo: boolean;
    rientro: boolean;
    inizioProva?: string;
    tipo?: 'GIOVANE' | 'ADULTO' | 'SOSTENITORE';
    idSezione: string;
    sezione: Sezione;
};

export type TipoIncarico = {
    sigla?: string;
    nome?: string;
    adulti?: boolean;
    livello?: 'NAZIONALE' | 'SEZIONE' | 'GRUPPO' | 'UNITA';
    nominabileDa?: Array<(string)>;
    attivo?: boolean;
};

export type livello2 = 'NAZIONALE' | 'SEZIONE' | 'GRUPPO' | 'UNITA';

export type Unita = {
    id?: string;
    tipo?: 'BRANCO' | 'REPARTO' | 'COMPAGNIA';
    idGruppo?: string;
    gruppo?: Gruppo;
};

export type tipo2 = 'BRANCO' | 'REPARTO' | 'COMPAGNIA';

export type Allegato = {
    name: string;
    supportedExtensions?: string;
    required: boolean;
};

export type DomandaForm = {
    titolo: string;
    descrizione?: string;
    opzionale: boolean;
    tipo: 'TESTO_BREVE' | 'TESTO' | 'CHECKBOX' | 'NUMERO' | 'SELECT' | 'DATA';
    opzioni?: Array<(string)>;
};

export type tipo3 = 'TESTO_BREVE' | 'TESTO' | 'CHECKBOX' | 'NUMERO' | 'SELECT' | 'DATA';

export type EventoCreateModel = {
    id?: string;
    nome: string;
    descrizione?: string;
    inizioEvento: string;
    fineEvento: string;
    inizioIscrizioni: string;
    fineIscrizioni: string;
    maxPartecipanti: number;
    soloAdulti: boolean;
    costo: number;
    incarichi: Array<(string)>;
    allegati: {
        [key: string]: (string);
    };
    tessereAbilitate?: Array<(number)>;
    servizi: Array<ServizioModel>;
    metodiPagamento: Array<('BONIFICO' | 'PAYPAL')>;
    questionari: Array<Questionario>;
    allegatiRichiesti: Array<Allegato>;
    incarichiResponsabili: Array<(string)>;
    campoScuola: boolean;
};

export type OpzioneServizioModel = {
    nome: string;
    costo: number;
    counter?: number;
    available: boolean;
    onlyIfValues?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
};

export type Questionario = {
    id: string;
    titolo?: string;
    incarichiAutorizzati: Array<(string)>;
    domande: Array<DomandaForm>;
    obbligatorio: boolean;
};

export type ServizioModel = {
    nome?: string;
    descrizione?: string;
    opzioni?: Array<OpzioneServizioModel>;
};

export type SendMailModel = {
    toRoles?: Array<(string)>;
    toParticipants?: Array<(string)>;
    subject: string;
    content: string;
};

export type SendMailResponse = {
    success: boolean;
    sent: number;
    error?: string;
};

export type CensimentoEditModel = {
    confirmed: boolean;
    idRinnovi: Array<(string)>;
    idNuovi: Array<(string)>;
};

export type PersonaEditModel = {
    nome: string;
    cognome: string;
    alias?: string;
    indirizzo: string;
    comune: string;
    provincia: string;
    cap: string;
    luogoNascita: string;
    provinciaNascita?: string;
    telefono?: string;
    email: string;
    telefono2?: string;
    email2?: string;
    sesso?: string;
    emailConsent?: boolean;
    codiceFiscale?: string;
};

export type EsitoEditModel = {
    esitoCampoScuola: 'CONSEGUITO' | 'FERMATO' | 'NON_CONSEGUITO';
    data?: string;
};

export type esitoCampoScuola = 'CONSEGUITO' | 'FERMATO' | 'NON_CONSEGUITO';

export type EventoEditModel = {
    nome: string;
    descrizione: string;
    inizioEvento: string;
    fineEvento: string;
    inizioIscrizioni: string;
    fineIscrizioni: string;
    maxPartecipanti: number;
    soloAdulti: boolean;
    costo: number;
    incarichi: Array<(string)>;
    tessereAbilitate: Array<(number)>;
    paypal: boolean;
    allegatiRichiesti: Array<Allegato>;
    incarichiResponsabili: Array<(string)>;
};

export type IscrizioneEventoAdminViewModel = {
    id: string;
    idEvento: string;
    persona: PersonaViewModel;
    questionari: {
        [key: string]: RisposteQuestionario;
    };
    servizi: Array<(string)>;
    allegati: {
        [key: string]: (string);
    };
    dataCreazione?: string;
    confermato: boolean;
    prezzo: number;
    paymentReference?: string;
    review: boolean;
    reviewComment?: string;
    validationReason?: string;
    corso?: string;
    campoScuola?: string;
    deleteReason?: string;
    deleteTimestamp?: string;
    isValid: boolean;
};

export type TipoIncaricoViewModel = {
    sigla: string;
    nome: string;
    adulti: boolean;
    livello: 'NAZIONALE' | 'SEZIONE' | 'GRUPPO' | 'UNITA';
    nominabileDa: Array<(string)>;
    attivo: boolean;
};

export type StatisticheSezioneModel = {
    annoScout: string;
    idSezione: string;
    age: number;
    nome: string;
    nuovi: number;
    rientri: number;
    rinnovi: number;
};

export type StatisticheGruppoModel = {
    annoScout: string;
    idSezione: string;
    numero: number;
    idTipoIncarico: string;
    count: number;
};

export type SezioneViewModel = {
    id?: string;
    nome?: string;
    chiusa?: boolean;
};

export type GruppoViewModel = {
    id?: string;
    idSezione?: string;
    numero?: number;
};

export type SezioneDetailViewModel = {
    id?: string;
    nome?: string;
    chiusa?: boolean;
    gruppi?: Array<GruppoViewModel>;
};

export type AdesioneViewModel = {
    id: string;
    idSezione: string;
    anno: number;
    form: {
        [key: string]: (string);
    };
    submitted: boolean;
    approved: boolean;
    paymentId?: string;
    statuto?: string;
    lastUpdate?: string;
    allegati: Array<(string)>;
};

export type BrevettoFormazioneViewModel = BrevettoViewModel & {
    tipo?: string;
    idTipo?: string;
    progressivo?: number;
} & {
    tipo: string;
    idTipo: string;
};

export type BrevettoViewModel = {
    id: string;
    obtainedAt: string;
};

export type PersonaDetailViewModel = {
    id: string;
    tessera?: number;
    nome: string;
    alias?: string;
    cognome: string;
    indirizzo: string;
    comune: string;
    provincia: string;
    cap: string;
    dataNascita: string;
    luogoNascita: string;
    provinciaNascita?: string;
    codiceFiscale: string;
    telefono?: string;
    email?: string;
    telefono2?: string;
    email2?: string;
    sesso?: string;
    incarichiCorrenti: Array<IncaricoViewModel>;
    lastTesseramento?: TesseramentoViewModel;
    avatar?: string;
    primaIscrizione?: string;
    talenti: Array<TalentoPersonaViewModel>;
    tesseramenti: Array<TesseramentoViewModel>;
    emailResponsabili?: Array<(string)>;
    incarichi: Array<IncaricoViewModel>;
    brevetti: Array<(BrevettoFormazioneViewModel)>;
    emailConsent: boolean;
    editable: boolean;
};

export type NotificationViewModel = {
    id: string;
    idPersona: string;
    title: string;
    description: string;
    params: {
        [key: string]: (string);
    };
    action?: 'SEGNA_PRESENZA';
};

export type action = 'SEGNA_PRESENZA';

export type CloudFile = {
    name: string;
    lastModified: string;
    url: string;
};

export type GruppoDetailViewModel = {
    id?: string;
    idSezione?: string;
    numero?: number;
    sezione?: SezioneViewModel;
    unita?: Array<UnitaViewModel>;
};

export type UnitaViewModel = {
    id?: string;
    tipo?: string;
    idGruppo?: string;
};

export type CampoScuolaViewModel = {
    name: string;
    startDate: string;
    endDate: string;
    id: string;
    staff: {
        [key: string]: ('CAPO_CAMPO' | 'DIRETTORE' | 'AIUTO_DIRETTORE' | 'SEGRETERIA');
    };
    corsi: Array<CorsoViewModel>;
    servizi: Array<PartecipanteServiziViewModel>;
};

export type CorsoViewModel = {
    id: string;
    name: string;
    livello: 'ASSOCIATIVO' | 'LEADERSHIP' | 'METODOLOGICO_L' | 'METODOLOGICO_E' | 'METODOLOGICO_R' | 'PROGRAMMAZIONE_EDUCATIVA' | 'COORDS' | 'CDS' | 'CG' | 'PSEZ' | 'WOOD_BADGE';
    staff: {
        [key: string]: ('CAPO_CORSO' | 'FORMATORE' | 'ALIF');
    };
    partecipanti: number;
};

export type PartecipanteServiziViewModel = {
    id: string;
    presente: boolean;
    persona: PersonaViewModel;
    tipo?: 'CAPO_CAMPO' | 'CAPO_CORSO' | 'COORGANIZZATORE' | 'DIRETTORE' | 'FORMATORE' | 'OSSERVATORE' | 'PARTECIPANTE' | 'RELATORE_ESTERNO' | 'RELATORE_INTERNO' | 'RESPONSABILE_DECENTRATO' | 'RESPONSABILE_EVENTO_FORMATIVO' | 'AIUTO_RESPONSABILE_EVENTO_FORMATIVO' | 'REFERENTE_SERVIZI' | 'ANIMAZIONE' | 'BAR' | 'CUCINA' | 'FOTOGRAFIA' | 'KINDERGARTEN' | 'LOGISTICA' | 'REFERENTE_PLENARIES' | 'SANITÀ' | 'SEGRETERIA' | 'SERVIZI_GENERALI' | 'VICE_CAPO_CAMPO' | 'VICE_DIRETTORE' | 'LISTENING_EAR' | 'PULIZIA_ED_IGIENE' | 'ALIF';
};

export type tipo4 = 'CAPO_CAMPO' | 'CAPO_CORSO' | 'COORGANIZZATORE' | 'DIRETTORE' | 'FORMATORE' | 'OSSERVATORE' | 'PARTECIPANTE' | 'RELATORE_ESTERNO' | 'RELATORE_INTERNO' | 'RESPONSABILE_DECENTRATO' | 'RESPONSABILE_EVENTO_FORMATIVO' | 'AIUTO_RESPONSABILE_EVENTO_FORMATIVO' | 'REFERENTE_SERVIZI' | 'ANIMAZIONE' | 'BAR' | 'CUCINA' | 'FOTOGRAFIA' | 'KINDERGARTEN' | 'LOGISTICA' | 'REFERENTE_PLENARIES' | 'SANITÀ' | 'SEGRETERIA' | 'SERVIZI_GENERALI' | 'VICE_CAPO_CAMPO' | 'VICE_DIRETTORE' | 'LISTENING_EAR' | 'PULIZIA_ED_IGIENE' | 'ALIF';

export type CorsoDetailViewModel = {
    id: string;
    name: string;
    livello: 'ASSOCIATIVO' | 'LEADERSHIP' | 'METODOLOGICO_L' | 'METODOLOGICO_E' | 'METODOLOGICO_R' | 'PROGRAMMAZIONE_EDUCATIVA' | 'COORDS' | 'CDS' | 'CG' | 'PSEZ' | 'WOOD_BADGE';
    staff: {
        [key: string]: ('CAPO_CORSO' | 'FORMATORE' | 'ALIF');
    };
    partecipanti: Array<PartecipanteCorsoViewModel>;
};

export type IscrizioneEventoViewModel = {
    id: string;
    idEvento: string;
    persona: PersonaViewModel;
    questionari: {
        [key: string]: RisposteQuestionario;
    };
    servizi: Array<(string)>;
    allegati: {
        [key: string]: (string);
    };
    dataCreazione: string;
    confermato: boolean;
    review: boolean;
    prezzo: number;
    validationReason?: string;
    paymentReference?: string;
    meta?: {
        [key: string]: (string);
    };
    deleteReason?: string;
    deleteTimestamp?: string;
    valid?: boolean;
};

export type PartecipanteCorsoViewModel = {
    corso: CorsoViewModel;
    iscrizione: IscrizioneEventoViewModel;
    commenti: {
        [key: string]: (string);
    };
    esito?: 'CONSEGUITO' | 'FERMATO' | 'NON_CONSEGUITO';
    dataConseguimento?: string;
    presente: boolean;
    persona: PersonaViewModel;
};

export type esito = 'CONSEGUITO' | 'FERMATO' | 'NON_CONSEGUITO';

export type PartecipanteCorsoCommentoViewModel = {
    id: string;
    corso: CorsoViewModel;
    iscrizione: IscrizioneEventoViewModel;
    commenti: {
        [key: string]: (string);
    };
    esito?: 'CONSEGUITO' | 'FERMATO' | 'NON_CONSEGUITO';
    dataConseguimento?: string;
    presente: boolean;
    persona: PersonaViewModel;
    campo: CampoScuolaViewModel;
};

export type EventoViewModel = {
    id: string;
    nome: string;
    descrizione?: string;
    inizioEvento: string;
    fineEvento: string;
    inizioIscrizioni: string;
    fineIscrizioni: string;
    maxPartecipanti: number;
    iscrizioniCount: number;
    metodiPagamento: Array<('BONIFICO' | 'PAYPAL')>;
    tessereAbilitate?: Array<(number)>;
    tessereRitardatari?: Array<(number)>;
    tipo: 'GIOVANI' | 'ADULTI' | 'FORMAZIONE' | 'SERVIZI';
};

export type tipo5 = 'GIOVANI' | 'ADULTI' | 'FORMAZIONE' | 'SERVIZI';

export type EventoDetailViewModel = {
    id: string;
    nome: string;
    descrizione: string;
    inizioEvento: string;
    fineEvento: string;
    inizioIscrizioni: string;
    fineIscrizioni: string;
    maxPartecipanti: number;
    iscritti: number;
    soloAdulti: boolean;
    costo: number;
    servizi: Array<ServizioModel>;
    incarichi: Array<(string)>;
    questionari: Array<Questionario>;
    iscrizioni: Array<IscrizioneEventoViewModel>;
    metodiPagamento: Array<('BONIFICO' | 'PAYPAL')>;
    allegatiRichiesti: Array<Allegato>;
    allegati: {
        [key: string]: (string);
    };
    tessereAbilitate?: Array<(number)>;
    tessereRitardatari?: Array<(number)>;
    campoScuola?: boolean;
};

export type ApplicationContext = {
    parent?: ApplicationContext;
    id?: string;
    displayName?: string;
    autowireCapableBeanFactory?: AutowireCapableBeanFactory;
    applicationName?: string;
    startupDate?: number;
    environment?: Environment;
    beanDefinitionCount?: number;
    beanDefinitionNames?: Array<(string)>;
    parentBeanFactory?: BeanFactory;
    classLoader?: {
        name?: string;
        registeredAsParallelCapable?: boolean;
        parent?: {
            name?: string;
            registeredAsParallelCapable?: boolean;
            unnamedModule?: {
                name?: string;
                classLoader?: {
                    name?: string;
                    registeredAsParallelCapable?: boolean;
                    definedPackages?: Array<{
                        name?: string;
                        annotations?: Array<{
                            [key: string]: unknown;
                        }>;
                        declaredAnnotations?: Array<{
                            [key: string]: unknown;
                        }>;
                        sealed?: boolean;
                        specificationTitle?: string;
                        specificationVersion?: string;
                        specificationVendor?: string;
                        implementationTitle?: string;
                        implementationVersion?: string;
                        implementationVendor?: string;
                    }>;
                    defaultAssertionStatus?: boolean;
                };
                descriptor?: {
                    open?: boolean;
                    automatic?: boolean;
                };
                named?: boolean;
                annotations?: Array<{
                    [key: string]: unknown;
                }>;
                declaredAnnotations?: Array<{
                    [key: string]: unknown;
                }>;
                packages?: Array<(string)>;
                nativeAccessEnabled?: boolean;
                layer?: {
                    [key: string]: unknown;
                };
            };
            definedPackages?: Array<{
                name?: string;
                annotations?: Array<{
                    [key: string]: unknown;
                }>;
                declaredAnnotations?: Array<{
                    [key: string]: unknown;
                }>;
                sealed?: boolean;
                specificationTitle?: string;
                specificationVersion?: string;
                specificationVendor?: string;
                implementationTitle?: string;
                implementationVersion?: string;
                implementationVendor?: string;
            }>;
            defaultAssertionStatus?: boolean;
        };
        unnamedModule?: {
            name?: string;
            classLoader?: {
                name?: string;
                registeredAsParallelCapable?: boolean;
                definedPackages?: Array<{
                    name?: string;
                    annotations?: Array<{
                        [key: string]: unknown;
                    }>;
                    declaredAnnotations?: Array<{
                        [key: string]: unknown;
                    }>;
                    sealed?: boolean;
                    specificationTitle?: string;
                    specificationVersion?: string;
                    specificationVendor?: string;
                    implementationTitle?: string;
                    implementationVersion?: string;
                    implementationVendor?: string;
                }>;
                defaultAssertionStatus?: boolean;
            };
            descriptor?: {
                open?: boolean;
                automatic?: boolean;
            };
            named?: boolean;
            annotations?: Array<{
                [key: string]: unknown;
            }>;
            declaredAnnotations?: Array<{
                [key: string]: unknown;
            }>;
            packages?: Array<(string)>;
            nativeAccessEnabled?: boolean;
            layer?: {
                [key: string]: unknown;
            };
        };
        definedPackages?: Array<{
            name?: string;
            annotations?: Array<{
                [key: string]: unknown;
            }>;
            declaredAnnotations?: Array<{
                [key: string]: unknown;
            }>;
            sealed?: boolean;
            specificationTitle?: string;
            specificationVersion?: string;
            specificationVendor?: string;
            implementationTitle?: string;
            implementationVersion?: string;
            implementationVendor?: string;
        }>;
        defaultAssertionStatus?: boolean;
    };
};

export type AutowireCapableBeanFactory = {
    [key: string]: unknown;
};

export type BeanFactory = {
    [key: string]: unknown;
};

export type CampoScuola = {
    id: string;
    name: string;
    startDate: string;
    endDate: string;
    staff: {
        [key: string]: ('CAPO_CAMPO' | 'DIRETTORE' | 'AIUTO_DIRETTORE' | 'SEGRETERIA');
    };
    corsi: Array<Corso>;
    servizi: Array<PartecipanteServizi>;
};

export type Corso = {
    id: string;
    name: string;
    livello: 'ASSOCIATIVO' | 'LEADERSHIP' | 'METODOLOGICO_L' | 'METODOLOGICO_E' | 'METODOLOGICO_R' | 'PROGRAMMAZIONE_EDUCATIVA' | 'COORDS' | 'CDS' | 'CG' | 'PSEZ' | 'WOOD_BADGE';
    staff: {
        [key: string]: ('CAPO_CORSO' | 'FORMATORE' | 'ALIF');
    };
    idCampoScuola: string;
    campoScuola: CampoScuola;
    partecipanti: Array<PartecipanteCorso>;
};

export type Environment = {
    activeProfiles?: Array<(string)>;
    defaultProfiles?: Array<(string)>;
};

export type Evento = {
    id: string;
    nome: string;
    descrizione?: string;
    inizioEvento: string;
    fineEvento: string;
    inizioIscrizioni: string;
    fineIscrizioni: string;
    maxPartecipanti: number;
    soloAdulti: boolean;
    costo: number;
    incarichi?: Array<(string)>;
    allegati?: {
        [key: string]: (string);
    };
    iscrizioni: Array<IscrizioneEvento>;
    tessereAbilitate?: Array<(number)>;
    tessereRitardatari: Array<(number)>;
    tessereAdmin: Array<(number)>;
    tessereMod: Array<(number)>;
    notificationEmail?: string;
    config: EventoConfig;
    questionari: Array<Questionario>;
    isCampoScuola: boolean;
};

export type EventoConfig = {
    servizi?: Array<Servizio>;
    questionari?: Array<Questionario>;
    allegatiRichiesti?: Array<Allegato>;
    metodiPagamento?: Array<('BONIFICO' | 'PAYPAL')>;
    incarichiResponsabili?: Array<(string)>;
};

export type Inverso = Vincolo & {
    servizio?: string;
};

export type IscrizioneEvento = {
    id?: string;
    idPersona?: string;
    persona?: Persona;
    prezzo?: number;
    confermato?: boolean;
    dataCreazione?: string;
    idCreatore?: string;
    idEvento?: string;
    evento?: Evento;
    questionari?: {
        [key: string]: RisposteQuestionario;
    };
    servizi?: Array<(string)>;
    allegati?: {
        [key: string]: (string);
    };
    meta?: {
        [key: string]: (string);
    };
    paymentReference?: string;
    review?: boolean;
    reviewComment?: string;
    partecipazione?: PartecipanteCorso;
    servizio?: PartecipanteServizi;
    deleteReason?: string;
    deleteTimestamp?: string;
};

export type NumeroPosti = Vincolo & {
    numeroPosti?: number;
    postiDisponibili?: number;
};

export type OpzioneServizio = {
    nome?: string;
    costo?: number;
    counter?: number;
    vincoli?: Array<(Inverso | NumeroPosti | PostiPerSesso | PostiPerUnita)>;
    onlyIfValues?: {
        [key: string]: {
            [key: string]: unknown;
        };
    };
};

export type PartecipanteCorso = {
    id: string;
    idCorso: string;
    corso: Corso;
    idIscrizione: string;
    iscrizione: IscrizioneEvento;
    presente?: boolean;
    commenti: {
        [key: string]: (string);
    };
    esito?: 'CONSEGUITO' | 'FERMATO' | 'NON_CONSEGUITO';
    dataConseguimento?: string;
};

export type PartecipanteServizi = {
    id: string;
    idCampoScuola: string;
    campoScuola: CampoScuola;
    idIscrizione: string;
    iscrizione: IscrizioneEvento;
    presente?: boolean;
    tipo?: 'CAPO_CAMPO' | 'CAPO_CORSO' | 'COORGANIZZATORE' | 'DIRETTORE' | 'FORMATORE' | 'OSSERVATORE' | 'PARTECIPANTE' | 'RELATORE_ESTERNO' | 'RELATORE_INTERNO' | 'RESPONSABILE_DECENTRATO' | 'RESPONSABILE_EVENTO_FORMATIVO' | 'AIUTO_RESPONSABILE_EVENTO_FORMATIVO' | 'REFERENTE_SERVIZI' | 'ANIMAZIONE' | 'BAR' | 'CUCINA' | 'FOTOGRAFIA' | 'KINDERGARTEN' | 'LOGISTICA' | 'REFERENTE_PLENARIES' | 'SANITÀ' | 'SEGRETERIA' | 'SERVIZI_GENERALI' | 'VICE_CAPO_CAMPO' | 'VICE_DIRETTORE' | 'LISTENING_EAR' | 'PULIZIA_ED_IGIENE' | 'ALIF';
};

export type PostiPerSesso = Vincolo & {
    postiMaschi?: number;
    postiFemmine?: number;
};

export type PostiPerUnita = Vincolo & {
    applicationContext?: ApplicationContext;
    posti?: number;
};

export type Servizio = {
    nome?: string;
    descrizione?: string;
    opzioni?: Array<OpzioneServizio>;
};

export type Vincolo = {
    class: string;
};

export type CensimentoViewModel = {
    id: number;
    idSezione: string;
    idRinnovi: Array<(string)>;
    idNuovi: Array<(string)>;
    costo: number;
    annoScout: number;
    paymentId?: string;
    approved: boolean;
    confirmed: boolean;
    createdAt: string;
    paymentDate?: string;
};

export type CensimentoAdminViewModel = {
    id: number;
    idSezione: string;
    nomeSezione: string;
    costo: number;
    annoScout: number;
    paymentId?: string;
    approved: boolean;
    createdAt: string;
    paymentDate?: string;
};

export type AllegaStatutoData = {
    body?: {
        file: (Blob | File);
    };
    path: {
        id: string;
        idAdesione: string;
    };
};

export type AllegaStatutoResponse = (unknown);

export type AllegaStatutoError = unknown;

export type AllegaDocumentiAdesioneData = {
    body?: {
        file: (Blob | File);
    };
    path: {
        id: string;
        idAdesione: string;
    };
};

export type AllegaDocumentiAdesioneResponse = (unknown);

export type AllegaDocumentiAdesioneError = unknown;

export type GetAdesioniData = {
    path: {
        id: string;
    };
};

export type GetAdesioniResponse = (Array<AdesioneViewModel>);

export type GetAdesioniError = unknown;

export type CreateAdesioneData = {
    body: {
        [key: string]: (string);
    };
    path: {
        id: string;
    };
};

export type CreateAdesioneResponse = (unknown);

export type CreateAdesioneError = unknown;

export type EditAdesioneData = {
    body: {
        [key: string]: (string);
    };
    path: {
        id: string;
        idAdesione: string;
    };
};

export type EditAdesioneResponse = (unknown);

export type EditAdesioneError = unknown;

export type FindAllResponse = (Array<SezioneViewModel>);

export type FindAllError = unknown;

export type FindByIdData = {
    path?: {
        id?: string;
    };
};

export type FindByIdResponse = (SezioneDetailViewModel);

export type FindByIdError = unknown;

export type SetAvatarData = {
    body?: {
        file: (Blob | File);
    };
};

export type SetAvatarResponse = (unknown);

export type SetAvatarError = unknown;

export type FindAll1Data = {
    query: {
        forUpdate: boolean;
    };
};

export type FindAll1Response = (Array<PersonaViewModel>);

export type FindAll1Error = unknown;

export type CreateData = {
    body: PersonaCreateModel;
};

export type CreateResponse = (unknown);

export type CreateError = unknown;

export type AddIncaricoData = {
    body: IncaricoCreateModel;
    path: {
        id: string;
    };
};

export type AddIncaricoResponse = (unknown);

export type AddIncaricoError = unknown;

export type AssicuraData = {
    path: {
        id: string;
    };
    query: {
        dataInizio: string;
    };
};

export type AssicuraResponse = (unknown);

export type AssicuraError = unknown;

export type FindForCensimentoData = {
    query?: {
        ids?: string;
        query?: string;
        tessera?: number;
    };
};

export type FindForCensimentoResponse = (Array<PersonaViewModel>);

export type FindForCensimentoError = unknown;

export type FindData = {
    body: PersonaFilters;
};

export type FindResponse = (Array<PersonaViewModel>);

export type FindError = unknown;

export type RipescaData = {
    path: {
        id: string;
    };
    query?: {
        idGruppo?: string;
    };
};

export type RipescaResponse = (unknown);

export type RipescaError = unknown;

export type FixIncarichiData = {
    body: Array<(string)>;
};

export type FixIncarichiResponse = (unknown);

export type FixIncarichiError = unknown;

export type SelfSignUpData = {
    body: PersonaCreateModel;
    query: {
        gruppo: number;
        sezione: string;
    };
};

export type SelfSignUpResponse = (unknown);

export type SelfSignUpError = unknown;

export type SendResetPasswordData = {
    path: {
        tessera: number;
    };
};

export type SendResetPasswordResponse = (string);

export type SendResetPasswordError = unknown;

export type ResetPasswordData = {
    body: ResetPasswordModel;
};

export type ResetPasswordResponse = (unknown);

export type ResetPasswordError = unknown;

export type FindById1Data = {
    path?: {
        id?: string;
    };
};

export type FindById1Response = (PersonaDetailViewModel);

export type FindById1Error = unknown;

export type DeletePersonaData = {
    path: {
        id: string;
    };
};

export type DeletePersonaResponse = (unknown);

export type DeletePersonaError = unknown;

export type EditData = {
    body: PersonaEditModel;
    path: {
        id: string;
    };
};

export type EditResponse = (unknown);

export type EditError = unknown;

export type FindTemporaneiResponse = (Array<PersonaViewModel>);

export type FindTemporaneiError = unknown;

export type GetMeResponse = (PersonaDetailViewModel);

export type GetMeError = unknown;

export type RemoveIncaricoData = {
    path: {
        id: string;
        idIncarico: string;
    };
};

export type RemoveIncaricoResponse = (unknown);

export type RemoveIncaricoError = unknown;

export type IscriviData = {
    body: IscrizioneEventoEditModel;
    path: {
        id: string;
    };
};

export type IscriviResponse = (void);

export type IscriviError = unknown;

export type SetNotesData = {
    body: CommentIscrizioneEditModel;
    path: {
        id: string;
        idIscrizione: string;
    };
};

export type SetNotesResponse = (unknown);

export type SetNotesError = unknown;

export type ToggleApprovalData = {
    path: {
        id: string;
        idIscrizione: string;
    };
};

export type ToggleApprovalResponse = (unknown);

export type ToggleApprovalError = unknown;

export type GetAll2Data = {
    query: {
        includePast: boolean;
    };
};

export type GetAll2Response = (Array<EventoViewModel>);

export type GetAll2Error = unknown;

export type Create2Data = {
    body: EventoCreateModel;
};

export type Create2Response = (unknown);

export type Create2Error = unknown;

export type UploadAttachmentData = {
    body?: {
        file: (Blob | File);
    };
    path: {
        id: string;
        idIscrizione: string;
        nomeAllegato: string;
    };
};

export type UploadAttachmentResponse = (unknown);

export type UploadAttachmentError = unknown;

export type GetById2Data = {
    path: {
        id: string;
    };
    query: {
        for: string;
    };
};

export type GetById2Response = (EventoDetailViewModel);

export type GetById2Error = unknown;

export type UpdateData = {
    body: EventoEditModel;
    path: {
        id: string;
    };
};

export type UpdateResponse = (void);

export type UpdateError = unknown;

export type SetRitardatariData = {
    body: Array<(number)>;
    path: {
        id: string;
    };
};

export type SetRitardatariResponse = (unknown);

export type SetRitardatariError = unknown;

export type DeleteIscrizioneData = {
    body?: string;
    path: {
        id: string;
        idIscrizione: string;
    };
};

export type DeleteIscrizioneResponse = (void);

export type DeleteIscrizioneError = unknown;

export type ForceUpdateIscrizioneData = {
    body: IscrizioneEventoAdminViewModel;
    path: {
        id: string;
        idIscrizione: string;
    };
};

export type ForceUpdateIscrizioneResponse = (void);

export type ForceUpdateIscrizioneError = unknown;

export type RestoreIscrizioneData = {
    path: {
        id: string;
        idIscrizione: string;
    };
};

export type RestoreIscrizioneResponse = (unknown);

export type RestoreIscrizioneError = unknown;

export type GetMyIscrizioniResponse = (Array<IscrizioneEventoViewModel>);

export type GetMyIscrizioniError = unknown;

export type GetForUpdateData = {
    path: {
        id: string;
    };
};

export type GetForUpdateResponse = (Evento);

export type GetForUpdateError = unknown;

export type GetIscrizioniData = {
    path: {
        id: string;
    };
};

export type GetIscrizioniResponse = (Array<IscrizioneEventoAdminViewModel>);

export type GetIscrizioniError = unknown;

export type CancelIscrizioneData = {
    path: {
        id: string;
        idIscrizione: string;
    };
};

export type CancelIscrizioneResponse = (unknown);

export type CancelIscrizioneError = unknown;

export type DeleteAttachmentData = {
    path: {
        id: string;
        idIscrizione: string;
        nomeAllegato: string;
    };
};

export type DeleteAttachmentResponse = (unknown);

export type DeleteAttachmentError = unknown;

export type DeleteBonificoData = {
    path: {
        id: string;
        idIscrizione: string;
    };
};

export type DeleteBonificoResponse = (unknown);

export type DeleteBonificoError = unknown;

export type CreateOrderData = {
    path: {
        idIscrizione: string;
    };
};

export type CreateOrderResponse = (OrderViewModel);

export type CreateOrderError = unknown;

export type VerifyOrderData = {
    body: ApproveDataModel;
    path: {
        idIscrizione: string;
    };
};

export type VerifyOrderResponse = (unknown);

export type VerifyOrderError = unknown;

export type VerifyOrdersData = {
    body?: {
        file: (Blob | File);
    };
    query: {
        idIscrizioni: string;
    };
};

export type VerifyOrdersResponse = (unknown);

export type VerifyOrdersError = unknown;

export type VerifyOrder1Data = {
    body?: {
        file: (Blob | File);
    };
    path: {
        idIscrizione: string;
    };
};

export type VerifyOrder1Response = (unknown);

export type VerifyOrder1Error = unknown;

export type PayCensimentoData = {
    body?: {
        file: (Blob | File);
    };
    path: {
        idCensimento: number;
    };
};

export type PayCensimentoResponse = (unknown);

export type PayCensimentoError = unknown;

export type PayAdesioneData = {
    body?: {
        file: (Blob | File);
    };
    path: {
        idAdesione: string;
    };
};

export type PayAdesioneResponse = (unknown);

export type PayAdesioneError = unknown;

export type AcknowledgeData = {
    path: {
        id: string;
    };
};

export type AcknowledgeResponse = (unknown);

export type AcknowledgeError = unknown;

export type GetMyNotificationsResponse = (Array<NotificationViewModel>);

export type GetMyNotificationsError = unknown;

export type DeleteData = {
    path: {
        id: string;
    };
};

export type DeleteResponse = (unknown);

export type DeleteError = unknown;

export type GetAll1Data = {
    query: {
        includePast: boolean;
    };
};

export type GetAll1Response = (Array<CampoScuolaViewModel>);

export type GetAll1Error = unknown;

export type Create1Data = {
    body: CampoScuolaEditModel;
};

export type Create1Response = (unknown);

export type Create1Error = unknown;

export type GetByIdData = {
    path: {
        id: string;
    };
};

export type GetByIdResponse = (CampoScuolaViewModel);

export type GetByIdError = unknown;

export type CreateCorsoData = {
    body: CorsoEditModel;
    path: {
        id: string;
    };
};

export type CreateCorsoResponse = (unknown);

export type CreateCorsoError = unknown;

export type Edit1Data = {
    body: CampoScuolaEditModel;
    path: {
        id: string;
    };
};

export type Edit1Response = (unknown);

export type Edit1Error = unknown;

export type AddStaffData = {
    body: AddStaffModel;
    path: {
        id: string;
    };
};

export type AddStaffResponse = (unknown);

export type AddStaffError = unknown;

export type AddPartecipanteData = {
    body: Array<(string)>;
    path: {
        idCampo: string;
        idCorso: string;
    };
};

export type AddPartecipanteResponse = (unknown);

export type AddPartecipanteError = unknown;

export type AddServizioData = {
    body: Array<(string)>;
    path: {
        idCampo: string;
    };
};

export type AddServizioResponse = (unknown);

export type AddServizioError = unknown;

export type GetValutazioneData = {
    path: {
        idCampo: string;
        idCorso: string;
        idIscrizione: string;
    };
};

export type GetValutazioneResponse = (string);

export type GetValutazioneError = unknown;

export type DeletePartecipanteData = {
    path: {
        idCampo: string;
        idCorso: string;
        idIscrizione: string;
    };
};

export type DeletePartecipanteResponse = (unknown);

export type DeletePartecipanteError = unknown;

export type ValutaPartecipanteData = {
    body: {
        [key: string]: (string);
    };
    path: {
        idCampo: string;
        idCorso: string;
        idIscrizione: string;
    };
};

export type ValutaPartecipanteResponse = (unknown);

export type ValutaPartecipanteError = unknown;

export type TogglePresenzaData = {
    path: {
        idCampo: string;
        idCorso: string;
        idIscrizione: string;
    };
};

export type TogglePresenzaResponse = (unknown);

export type TogglePresenzaError = unknown;

export type InserisciEsitoData = {
    body: EsitoEditModel;
    path: {
        idCampo: string;
        idCorso: string;
        idIscrizione: string;
    };
};

export type InserisciEsitoResponse = (unknown);

export type InserisciEsitoError = unknown;

export type TogglePresenzaServiziData = {
    path: {
        id: string;
        idCampo: string;
    };
};

export type TogglePresenzaServiziResponse = (unknown);

export type TogglePresenzaServiziError = unknown;

export type SetTipoServizioData = {
    body?: 'CAPO_CAMPO' | 'CAPO_CORSO' | 'COORGANIZZATORE' | 'DIRETTORE' | 'FORMATORE' | 'OSSERVATORE' | 'PARTECIPANTE' | 'RELATORE_ESTERNO' | 'RELATORE_INTERNO' | 'RESPONSABILE_DECENTRATO' | 'RESPONSABILE_EVENTO_FORMATIVO' | 'AIUTO_RESPONSABILE_EVENTO_FORMATIVO' | 'REFERENTE_SERVIZI' | 'ANIMAZIONE' | 'BAR' | 'CUCINA' | 'FOTOGRAFIA' | 'KINDERGARTEN' | 'LOGISTICA' | 'REFERENTE_PLENARIES' | 'SANITÀ' | 'SEGRETERIA' | 'SERVIZI_GENERALI' | 'VICE_CAPO_CAMPO' | 'VICE_DIRETTORE' | 'LISTENING_EAR' | 'PULIZIA_ED_IGIENE' | 'ALIF';
    path: {
        idCampo: string;
        idServizio: string;
    };
};

export type SetTipoServizioResponse = (unknown);

export type SetTipoServizioError = unknown;

export type SelfTogglePresenzaData = {
    path: {
        idCampo: string;
    };
};

export type SelfTogglePresenzaResponse = (unknown);

export type SelfTogglePresenzaError = unknown;

export type UpdateCommentoData = {
    body: {
        [key: string]: (string);
    };
    path: {
        id: string;
    };
};

export type UpdateCommentoResponse = (unknown);

export type UpdateCommentoError = unknown;

export type GetCorsoByIdData = {
    path: {
        idCampo: string;
        idCorso: string;
    };
};

export type GetCorsoByIdResponse = (CorsoDetailViewModel);

export type GetCorsoByIdError = unknown;

export type GetSchedeData = {
    path: {
        idCampo: string;
        idCorso: string;
    };
};

export type GetSchedeResponse = (string);

export type GetSchedeError = unknown;

export type GetBrevettiData = {
    path: {
        idCampo: string;
        idCorso: string;
    };
};

export type GetBrevettiResponse = (string);

export type GetBrevettiError = unknown;

export type GetPresentiData = {
    path: {
        idCampo: string;
    };
};

export type GetPresentiResponse = (string);

export type GetPresentiError = unknown;

export type GetPartecipantiVisibiliResponse = (Array<PartecipanteCorsoCommentoViewModel>);

export type GetPartecipantiVisibiliError = unknown;

export type GetEquipeResponse = (Array<PersonaViewModel>);

export type GetEquipeError = unknown;

export type DeleteStaffCorsoData = {
    path: {
        id: string;
        idCorso: string;
        idPersona: string;
    };
};

export type DeleteStaffCorsoResponse = (unknown);

export type DeleteStaffCorsoError = unknown;

export type DeleteStaffData = {
    path: {
        id: string;
        idPersona: string;
    };
};

export type DeleteStaffResponse = (unknown);

export type DeleteStaffError = unknown;

export type AddServizio1Data = {
    path: {
        id: string;
        idCampo: string;
    };
};

export type AddServizio1Response = (unknown);

export type AddServizio1Error = unknown;

export type CreateTalentoData = {
    path: {
        id: string;
    };
};

export type CreateTalentoResponse = (TalentoPersona);

export type CreateTalentoError = unknown;

export type DeleteTalentoData = {
    path: {
        id: string;
    };
};

export type DeleteTalentoResponse = (unknown);

export type DeleteTalentoError = unknown;

export type GetTalentiResponse = (Array<Talento>);

export type GetTalentiError = unknown;

export type SendBatchEmailData = {
    body: SendMailModel;
};

export type SendBatchEmailResponse = (SendMailResponse);

export type SendBatchEmailError = unknown;

export type GetCurrentResponse = (Array<CensimentoViewModel>);

export type GetCurrentError = unknown;

export type CreateNewData = {
    body: CensimentoEditModel;
};

export type CreateNewResponse = (unknown);

export type CreateNewError = unknown;

export type Update1Data = {
    body: CensimentoEditModel;
    path: {
        id: number;
    };
};

export type Update1Response = (unknown);

export type Update1Error = unknown;

export type ApproveData = {
    path: {
        id: number;
    };
};

export type ApproveResponse = (unknown);

export type ApproveError = unknown;

export type GetPdfData = {
    path: {
        id: number;
    };
};

export type GetPdfResponse = (string);

export type GetPdfError = unknown;

export type GetAll3Response = (Array<CensimentoAdminViewModel>);

export type GetAll3Error = unknown;

export type RejectAdesioneData = {
    path: {
        id: string;
    };
};

export type RejectAdesioneResponse = (unknown);

export type RejectAdesioneError = unknown;

export type ApproveAdesioneData = {
    path: {
        id: string;
    };
};

export type ApproveAdesioneResponse = (unknown);

export type ApproveAdesioneError = unknown;

export type GetAllAdesioniResponse = (Array<AdesioneViewModel>);

export type GetAllAdesioniError = unknown;

export type GetAssignableResponse = (Array<TipoIncaricoViewModel>);

export type GetAssignableError = unknown;

export type GetAllResponse = (Array<TipoIncarico>);

export type GetAllError = unknown;

export type GetStatsBySezioneResponse = (Array<StatisticheSezioneModel>);

export type GetStatsBySezioneError = unknown;

export type GetGruppiStatsBySezioneResponse = (Array<StatisticheGruppoModel>);

export type GetGruppiStatsBySezioneError = unknown;

export type GetStatsResponse = (Array<StatisticheSezioneModel>);

export type GetStatsError = unknown;

export type GetRecentFilesResponse = (Array<CloudFile>);

export type GetRecentFilesError = unknown;

export type FindVisibleResponse = (Array<GruppoDetailViewModel>);

export type FindVisibleError = unknown;

export type FindById2Data = {
    path?: {
        id?: string;
    };
};

export type FindById2Response = (GruppoDetailViewModel);

export type FindById2Error = unknown;

export type GetPersoneData = {
    path?: {
        id?: string;
    };
};

export type GetPersoneResponse = (Array<PersonaViewModel>);

export type GetPersoneError = unknown;

export type GetById1Data = {
    path: {
        id: string;
    };
};

export type GetById1Response = (string);

export type GetById1Error = unknown;

export type GetBrevettoByIdData = {
    path: {
        id: string;
    };
};

export type GetBrevettoByIdResponse = (string);

export type GetBrevettoByIdError = unknown;

export type SeedDataResponse = (unknown);

export type SeedDataError = unknown;