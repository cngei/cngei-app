// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-fetch';
import type { AllegaStatutoData, AllegaStatutoError, AllegaStatutoResponse, AllegaDocumentiAdesioneData, AllegaDocumentiAdesioneError, AllegaDocumentiAdesioneResponse, GetAdesioniData, GetAdesioniError, GetAdesioniResponse, CreateAdesioneData, CreateAdesioneError, CreateAdesioneResponse, EditAdesioneData, EditAdesioneError, EditAdesioneResponse, FindAllError, FindAllResponse, FindByIdData, FindByIdError, FindByIdResponse, SetAvatarData, SetAvatarError, SetAvatarResponse, FindAll1Data, FindAll1Error, FindAll1Response, CreateData, CreateError, CreateResponse, AddIncaricoData, AddIncaricoError, AddIncaricoResponse, AssicuraData, AssicuraError, AssicuraResponse, FindForCensimentoData, FindForCensimentoError, FindForCensimentoResponse, FindData, FindError, FindResponse, RipescaData, RipescaError, RipescaResponse, FixIncarichiData, FixIncarichiError, FixIncarichiResponse, SelfSignUpData, SelfSignUpError, SelfSignUpResponse, SendResetPasswordData, SendResetPasswordError, SendResetPasswordResponse, ResetPasswordData, ResetPasswordError, ResetPasswordResponse, FindById1Data, FindById1Error, FindById1Response, DeletePersonaData, DeletePersonaError, DeletePersonaResponse, EditData, EditError, EditResponse, FindTemporaneiError, FindTemporaneiResponse, GetMeError, GetMeResponse, RemoveIncaricoData, RemoveIncaricoError, RemoveIncaricoResponse, IscriviData, IscriviError, IscriviResponse, SetNotesData, SetNotesError, SetNotesResponse, ToggleApprovalData, ToggleApprovalError, ToggleApprovalResponse, GetAll2Data, GetAll2Error, GetAll2Response, Create2Data, Create2Error, Create2Response, UploadAttachmentData, UploadAttachmentError, UploadAttachmentResponse, GetById2Data, GetById2Error, GetById2Response, UpdateData, UpdateError, UpdateResponse, SetRitardatariData, SetRitardatariError, SetRitardatariResponse, DeleteIscrizioneData, DeleteIscrizioneError, DeleteIscrizioneResponse, ForceUpdateIscrizioneData, ForceUpdateIscrizioneError, ForceUpdateIscrizioneResponse, RestoreIscrizioneData, RestoreIscrizioneError, RestoreIscrizioneResponse, GetMyIscrizioniError, GetMyIscrizioniResponse, GetForUpdateData, GetForUpdateError, GetForUpdateResponse, GetIscrizioniData, GetIscrizioniError, GetIscrizioniResponse, CancelIscrizioneData, CancelIscrizioneError, CancelIscrizioneResponse, DeleteAttachmentData, DeleteAttachmentError, DeleteAttachmentResponse, DeleteBonificoData, DeleteBonificoError, DeleteBonificoResponse, CreateOrderData, CreateOrderError, CreateOrderResponse, VerifyOrderData, VerifyOrderError, VerifyOrderResponse, VerifyOrdersData, VerifyOrdersError, VerifyOrdersResponse, VerifyOrder1Data, VerifyOrder1Error, VerifyOrder1Response, PayCensimentoData, PayCensimentoError, PayCensimentoResponse, PayAdesioneData, PayAdesioneError, PayAdesioneResponse, AcknowledgeData, AcknowledgeError, AcknowledgeResponse, GetMyNotificationsError, GetMyNotificationsResponse, DeleteData, DeleteError, DeleteResponse, GetAll1Data, GetAll1Error, GetAll1Response, Create1Data, Create1Error, Create1Response, GetByIdData, GetByIdError, GetByIdResponse, CreateCorsoData, CreateCorsoError, CreateCorsoResponse, Edit1Data, Edit1Error, Edit1Response, AddStaffData, AddStaffError, AddStaffResponse, AddPartecipanteData, AddPartecipanteError, AddPartecipanteResponse, AddServizioData, AddServizioError, AddServizioResponse, GetValutazioneData, GetValutazioneError, GetValutazioneResponse, DeletePartecipanteData, DeletePartecipanteError, DeletePartecipanteResponse, ValutaPartecipanteData, ValutaPartecipanteError, ValutaPartecipanteResponse, TogglePresenzaData, TogglePresenzaError, TogglePresenzaResponse, InserisciEsitoData, InserisciEsitoError, InserisciEsitoResponse, TogglePresenzaServiziData, TogglePresenzaServiziError, TogglePresenzaServiziResponse, SetTipoServizioData, SetTipoServizioError, SetTipoServizioResponse, SelfTogglePresenzaData, SelfTogglePresenzaError, SelfTogglePresenzaResponse, UpdateCommentoData, UpdateCommentoError, UpdateCommentoResponse, GetCorsoByIdData, GetCorsoByIdError, GetCorsoByIdResponse, GetSchedeData, GetSchedeError, GetSchedeResponse, GetBrevettiData, GetBrevettiError, GetBrevettiResponse, GetPresentiData, GetPresentiError, GetPresentiResponse, GetPartecipantiVisibiliError, GetPartecipantiVisibiliResponse, GetEquipeError, GetEquipeResponse, DeleteStaffCorsoData, DeleteStaffCorsoError, DeleteStaffCorsoResponse, DeleteStaffData, DeleteStaffError, DeleteStaffResponse, AddServizio1Data, AddServizio1Error, AddServizio1Response, CreateTalentoData, CreateTalentoError, CreateTalentoResponse, DeleteTalentoData, DeleteTalentoError, DeleteTalentoResponse, GetTalentiError, GetTalentiResponse, SendBatchEmailData, SendBatchEmailError, SendBatchEmailResponse, GetCurrentError, GetCurrentResponse, CreateNewData, CreateNewError, CreateNewResponse, Update1Data, Update1Error, Update1Response, ApproveData, ApproveError, ApproveResponse, GetPdfData, GetPdfError, GetPdfResponse, GetAll3Error, GetAll3Response, RejectAdesioneData, RejectAdesioneError, RejectAdesioneResponse, ApproveAdesioneData, ApproveAdesioneError, ApproveAdesioneResponse, GetAllAdesioniError, GetAllAdesioniResponse, GetAssignableError, GetAssignableResponse, GetAllError, GetAllResponse, GetStatsBySezioneError, GetStatsBySezioneResponse, GetGruppiStatsBySezioneError, GetGruppiStatsBySezioneResponse, GetStatsError, GetStatsResponse, GetRecentFilesError, GetRecentFilesResponse, FindVisibleError, FindVisibleResponse, FindById2Data, FindById2Error, FindById2Response, GetPersoneData, GetPersoneError, GetPersoneResponse, GetById1Data, GetById1Error, GetById1Response, GetBrevettoByIdData, GetBrevettoByIdError, GetBrevettoByIdResponse, SeedDataError, SeedDataResponse } from './types.gen';

export const client = createClient(createConfig());

export class SezioneControllerService {
    public static allegaStatuto<ThrowOnError extends boolean = false>(options: Options<AllegaStatutoData, ThrowOnError>) {
        return (options?.client ?? client).put<AllegaStatutoResponse, AllegaStatutoError, ThrowOnError>({
            ...options,
            url: '/sezione/{id}/adesione/{idAdesione}/statuto'
        });
    }
    
    public static allegaDocumentiAdesione<ThrowOnError extends boolean = false>(options: Options<AllegaDocumentiAdesioneData, ThrowOnError>) {
        return (options?.client ?? client).put<AllegaDocumentiAdesioneResponse, AllegaDocumentiAdesioneError, ThrowOnError>({
            ...options,
            url: '/sezione/{id}/adesione/{idAdesione}/allegati'
        });
    }
    
    public static getAdesioni<ThrowOnError extends boolean = false>(options: Options<GetAdesioniData, ThrowOnError>) {
        return (options?.client ?? client).get<GetAdesioniResponse, GetAdesioniError, ThrowOnError>({
            ...options,
            url: '/sezione/{id}/adesione'
        });
    }
    
    public static createAdesione<ThrowOnError extends boolean = false>(options: Options<CreateAdesioneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateAdesioneResponse, CreateAdesioneError, ThrowOnError>({
            ...options,
            url: '/sezione/{id}/adesione'
        });
    }
    
    public static editAdesione<ThrowOnError extends boolean = false>(options: Options<EditAdesioneData, ThrowOnError>) {
        return (options?.client ?? client).patch<EditAdesioneResponse, EditAdesioneError, ThrowOnError>({
            ...options,
            url: '/sezione/{id}/adesione/{idAdesione}'
        });
    }
    
    public static findAll<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<FindAllResponse, FindAllError, ThrowOnError>({
            ...options,
            url: '/sezione'
        });
    }
    
    public static findById<ThrowOnError extends boolean = false>(options?: Options<FindByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<FindByIdResponse, FindByIdError, ThrowOnError>({
            ...options,
            url: '/sezione/{id}'
        });
    }
    
}

export class PersonaControllerService {
    public static setAvatar<ThrowOnError extends boolean = false>(options?: Options<SetAvatarData, ThrowOnError>) {
        return (options?.client ?? client).put<SetAvatarResponse, SetAvatarError, ThrowOnError>({
            ...options,
            url: '/persona/me/avatar'
        });
    }
    
    public static findAll1<ThrowOnError extends boolean = false>(options: Options<FindAll1Data, ThrowOnError>) {
        return (options?.client ?? client).get<FindAll1Response, FindAll1Error, ThrowOnError>({
            ...options,
            url: '/persona'
        });
    }
    
    public static create<ThrowOnError extends boolean = false>(options: Options<CreateData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateResponse, CreateError, ThrowOnError>({
            ...options,
            url: '/persona'
        });
    }
    
    public static addIncarico<ThrowOnError extends boolean = false>(options: Options<AddIncaricoData, ThrowOnError>) {
        return (options?.client ?? client).post<AddIncaricoResponse, AddIncaricoError, ThrowOnError>({
            ...options,
            url: '/persona/{id}/incarico'
        });
    }
    
    public static assicura<ThrowOnError extends boolean = false>(options: Options<AssicuraData, ThrowOnError>) {
        return (options?.client ?? client).post<AssicuraResponse, AssicuraError, ThrowOnError>({
            ...options,
            url: '/persona/{id}/assicurazione'
        });
    }
    
    public static findForCensimento<ThrowOnError extends boolean = false>(options?: Options<FindForCensimentoData, ThrowOnError>) {
        return (options?.client ?? client).get<FindForCensimentoResponse, FindForCensimentoError, ThrowOnError>({
            ...options,
            url: '/persona/search'
        });
    }
    
    public static find<ThrowOnError extends boolean = false>(options: Options<FindData, ThrowOnError>) {
        return (options?.client ?? client).post<FindResponse, FindError, ThrowOnError>({
            ...options,
            url: '/persona/search'
        });
    }
    
    public static ripesca<ThrowOnError extends boolean = false>(options: Options<RipescaData, ThrowOnError>) {
        return (options?.client ?? client).post<RipescaResponse, RipescaError, ThrowOnError>({
            ...options,
            url: '/persona/ripescaggi/{id}'
        });
    }
    
    public static fixIncarichi<ThrowOnError extends boolean = false>(options: Options<FixIncarichiData, ThrowOnError>) {
        return (options?.client ?? client).post<FixIncarichiResponse, FixIncarichiError, ThrowOnError>({
            ...options,
            url: '/persona/fixIncarichi'
        });
    }
    
    public static selfSignUp<ThrowOnError extends boolean = false>(options: Options<SelfSignUpData, ThrowOnError>) {
        return (options?.client ?? client).post<SelfSignUpResponse, SelfSignUpError, ThrowOnError>({
            ...options,
            url: '/persona/external/self'
        });
    }
    
    public static sendResetPassword<ThrowOnError extends boolean = false>(options: Options<SendResetPasswordData, ThrowOnError>) {
        return (options?.client ?? client).post<SendResetPasswordResponse, SendResetPasswordError, ThrowOnError>({
            ...options,
            url: '/persona/external/reset/{tessera}'
        });
    }
    
    public static resetPassword<ThrowOnError extends boolean = false>(options: Options<ResetPasswordData, ThrowOnError>) {
        return (options?.client ?? client).post<ResetPasswordResponse, ResetPasswordError, ThrowOnError>({
            ...options,
            url: '/persona/external/reset/'
        });
    }
    
    public static findById1<ThrowOnError extends boolean = false>(options?: Options<FindById1Data, ThrowOnError>) {
        return (options?.client ?? client).get<FindById1Response, FindById1Error, ThrowOnError>({
            ...options,
            url: '/persona/{id}'
        });
    }
    
    public static deletePersona<ThrowOnError extends boolean = false>(options: Options<DeletePersonaData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeletePersonaResponse, DeletePersonaError, ThrowOnError>({
            ...options,
            url: '/persona/{id}'
        });
    }
    
    public static edit<ThrowOnError extends boolean = false>(options: Options<EditData, ThrowOnError>) {
        return (options?.client ?? client).patch<EditResponse, EditError, ThrowOnError>({
            ...options,
            url: '/persona/{id}'
        });
    }
    
    public static findTemporanei<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<FindTemporaneiResponse, FindTemporaneiError, ThrowOnError>({
            ...options,
            url: '/persona/temporanei'
        });
    }
    
    public static getMe<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetMeResponse, GetMeError, ThrowOnError>({
            ...options,
            url: '/persona/me'
        });
    }
    
    public static removeIncarico<ThrowOnError extends boolean = false>(options: Options<RemoveIncaricoData, ThrowOnError>) {
        return (options?.client ?? client).delete<RemoveIncaricoResponse, RemoveIncaricoError, ThrowOnError>({
            ...options,
            url: '/persona/{id}/incarico/{idIncarico}'
        });
    }
    
}

export class EventoControllerService {
    public static iscrivi<ThrowOnError extends boolean = false>(options: Options<IscriviData, ThrowOnError>) {
        return (options?.client ?? client).put<IscriviResponse, IscriviError, ThrowOnError>({
            ...options,
            url: '/evento/{id}/iscrizioni'
        });
    }
    
    public static setNotes<ThrowOnError extends boolean = false>(options: Options<SetNotesData, ThrowOnError>) {
        return (options?.client ?? client).put<SetNotesResponse, SetNotesError, ThrowOnError>({
            ...options,
            url: '/evento/admin/{id}/iscrizioni/{idIscrizione}/notes'
        });
    }
    
    public static toggleApproval<ThrowOnError extends boolean = false>(options: Options<ToggleApprovalData, ThrowOnError>) {
        return (options?.client ?? client).put<ToggleApprovalResponse, ToggleApprovalError, ThrowOnError>({
            ...options,
            url: '/evento/admin/{id}/iscrizioni/{idIscrizione}/approve'
        });
    }
    
    public static getAll2<ThrowOnError extends boolean = false>(options: Options<GetAll2Data, ThrowOnError>) {
        return (options?.client ?? client).get<GetAll2Response, GetAll2Error, ThrowOnError>({
            ...options,
            url: '/evento'
        });
    }
    
    public static create2<ThrowOnError extends boolean = false>(options: Options<Create2Data, ThrowOnError>) {
        return (options?.client ?? client).post<Create2Response, Create2Error, ThrowOnError>({
            ...options,
            url: '/evento'
        });
    }
    
    public static uploadAttachment<ThrowOnError extends boolean = false>(options: Options<UploadAttachmentData, ThrowOnError>) {
        return (options?.client ?? client).post<UploadAttachmentResponse, UploadAttachmentError, ThrowOnError>({
            ...options,
            url: '/evento/{id}/iscrizioni/{idIscrizione}/allegati/{nomeAllegato}'
        });
    }
    
    public static getById2<ThrowOnError extends boolean = false>(options: Options<GetById2Data, ThrowOnError>) {
        return (options?.client ?? client).get<GetById2Response, GetById2Error, ThrowOnError>({
            ...options,
            url: '/evento/{id}'
        });
    }
    
    public static update<ThrowOnError extends boolean = false>(options: Options<UpdateData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateResponse, UpdateError, ThrowOnError>({
            ...options,
            url: '/evento/{id}'
        });
    }
    
    public static setRitardatari<ThrowOnError extends boolean = false>(options: Options<SetRitardatariData, ThrowOnError>) {
        return (options?.client ?? client).patch<SetRitardatariResponse, SetRitardatariError, ThrowOnError>({
            ...options,
            url: '/evento/{id}/ritardatari'
        });
    }
    
    public static deleteIscrizione<ThrowOnError extends boolean = false>(options: Options<DeleteIscrizioneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteIscrizioneResponse, DeleteIscrizioneError, ThrowOnError>({
            ...options,
            url: '/evento/{id}/iscrizioni/{idIscrizione}'
        });
    }
    
    public static forceUpdateIscrizione<ThrowOnError extends boolean = false>(options: Options<ForceUpdateIscrizioneData, ThrowOnError>) {
        return (options?.client ?? client).patch<ForceUpdateIscrizioneResponse, ForceUpdateIscrizioneError, ThrowOnError>({
            ...options,
            url: '/evento/{id}/iscrizioni/{idIscrizione}'
        });
    }
    
    public static restoreIscrizione<ThrowOnError extends boolean = false>(options: Options<RestoreIscrizioneData, ThrowOnError>) {
        return (options?.client ?? client).patch<RestoreIscrizioneResponse, RestoreIscrizioneError, ThrowOnError>({
            ...options,
            url: '/evento/admin/{id}/iscrizioni/{idIscrizione}/restore'
        });
    }
    
    public static getMyIscrizioni<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetMyIscrizioniResponse, GetMyIscrizioniError, ThrowOnError>({
            ...options,
            url: '/evento/iscrizioni'
        });
    }
    
    public static getForUpdate<ThrowOnError extends boolean = false>(options: Options<GetForUpdateData, ThrowOnError>) {
        return (options?.client ?? client).get<GetForUpdateResponse, GetForUpdateError, ThrowOnError>({
            ...options,
            url: '/evento/admin/{id}'
        });
    }
    
    public static getIscrizioni<ThrowOnError extends boolean = false>(options: Options<GetIscrizioniData, ThrowOnError>) {
        return (options?.client ?? client).get<GetIscrizioniResponse, GetIscrizioniError, ThrowOnError>({
            ...options,
            url: '/evento/admin/{id}/iscrizioni'
        });
    }
    
    public static cancelIscrizione<ThrowOnError extends boolean = false>(options: Options<CancelIscrizioneData, ThrowOnError>) {
        return (options?.client ?? client).delete<CancelIscrizioneResponse, CancelIscrizioneError, ThrowOnError>({
            ...options,
            url: '/evento/admin/{id}/iscrizioni/{idIscrizione}'
        });
    }
    
    public static deleteAttachment<ThrowOnError extends boolean = false>(options: Options<DeleteAttachmentData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteAttachmentResponse, DeleteAttachmentError, ThrowOnError>({
            ...options,
            url: '/evento/admin/{id}/iscrizioni/{idIscrizione}/{nomeAllegato}'
        });
    }
    
    public static deleteBonifico<ThrowOnError extends boolean = false>(options: Options<DeleteBonificoData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteBonificoResponse, DeleteBonificoError, ThrowOnError>({
            ...options,
            url: '/evento/admin/{id}/iscrizioni/{idIscrizione}/bonifico'
        });
    }
    
}

export class PaypalControllerService {
    public static createOrder<ThrowOnError extends boolean = false>(options: Options<CreateOrderData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOrderResponse, CreateOrderError, ThrowOnError>({
            ...options,
            url: '/pagamento/paypal/{idIscrizione}'
        });
    }
    
    public static verifyOrder<ThrowOnError extends boolean = false>(options: Options<VerifyOrderData, ThrowOnError>) {
        return (options?.client ?? client).post<VerifyOrderResponse, VerifyOrderError, ThrowOnError>({
            ...options,
            url: '/pagamento/paypal/{idIscrizione}/verifica'
        });
    }
    
}

export class BonificoControllerService {
    public static verifyOrders<ThrowOnError extends boolean = false>(options: Options<VerifyOrdersData, ThrowOnError>) {
        return (options?.client ?? client).post<VerifyOrdersResponse, VerifyOrdersError, ThrowOnError>({
            ...options,
            url: '/pagamento/bonifico'
        });
    }
    
    public static verifyOrder1<ThrowOnError extends boolean = false>(options: Options<VerifyOrder1Data, ThrowOnError>) {
        return (options?.client ?? client).post<VerifyOrder1Response, VerifyOrder1Error, ThrowOnError>({
            ...options,
            url: '/pagamento/bonifico/{idIscrizione}'
        });
    }
    
    public static payCensimento<ThrowOnError extends boolean = false>(options: Options<PayCensimentoData, ThrowOnError>) {
        return (options?.client ?? client).post<PayCensimentoResponse, PayCensimentoError, ThrowOnError>({
            ...options,
            url: '/pagamento/bonifico/censimento/{idCensimento}'
        });
    }
    
    public static payAdesione<ThrowOnError extends boolean = false>(options: Options<PayAdesioneData, ThrowOnError>) {
        return (options?.client ?? client).post<PayAdesioneResponse, PayAdesioneError, ThrowOnError>({
            ...options,
            url: '/pagamento/bonifico/adesione/{idAdesione}'
        });
    }
    
}

export class NotificationControllerService {
    public static acknowledge<ThrowOnError extends boolean = false>(options: Options<AcknowledgeData, ThrowOnError>) {
        return (options?.client ?? client).post<AcknowledgeResponse, AcknowledgeError, ThrowOnError>({
            ...options,
            url: '/notification/{id}/acknowledge'
        });
    }
    
    public static getMyNotifications<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetMyNotificationsResponse, GetMyNotificationsError, ThrowOnError>({
            ...options,
            url: '/notification'
        });
    }
    
    public static delete<ThrowOnError extends boolean = false>(options: Options<DeleteData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteResponse, DeleteError, ThrowOnError>({
            ...options,
            url: '/notification/{id}'
        });
    }
    
}

export class CampoScuolaControllerService {
    public static getAll1<ThrowOnError extends boolean = false>(options: Options<GetAll1Data, ThrowOnError>) {
        return (options?.client ?? client).get<GetAll1Response, GetAll1Error, ThrowOnError>({
            ...options,
            url: '/formazione'
        });
    }
    
    public static create1<ThrowOnError extends boolean = false>(options: Options<Create1Data, ThrowOnError>) {
        return (options?.client ?? client).post<Create1Response, Create1Error, ThrowOnError>({
            ...options,
            url: '/formazione'
        });
    }
    
    public static getById<ThrowOnError extends boolean = false>(options: Options<GetByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetByIdResponse, GetByIdError, ThrowOnError>({
            ...options,
            url: '/formazione/{id}'
        });
    }
    
    public static createCorso<ThrowOnError extends boolean = false>(options: Options<CreateCorsoData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateCorsoResponse, CreateCorsoError, ThrowOnError>({
            ...options,
            url: '/formazione/{id}'
        });
    }
    
    public static edit1<ThrowOnError extends boolean = false>(options: Options<Edit1Data, ThrowOnError>) {
        return (options?.client ?? client).patch<Edit1Response, Edit1Error, ThrowOnError>({
            ...options,
            url: '/formazione/{id}'
        });
    }
    
    public static addStaff<ThrowOnError extends boolean = false>(options: Options<AddStaffData, ThrowOnError>) {
        return (options?.client ?? client).post<AddStaffResponse, AddStaffError, ThrowOnError>({
            ...options,
            url: '/formazione/{id}/staff'
        });
    }
    
    public static addPartecipante<ThrowOnError extends boolean = false>(options: Options<AddPartecipanteData, ThrowOnError>) {
        return (options?.client ?? client).post<AddPartecipanteResponse, AddPartecipanteError, ThrowOnError>({
            ...options,
            url: '/formazione/{idCampo}/{idCorso}/partecipanti'
        });
    }
    
    public static addServizio<ThrowOnError extends boolean = false>(options: Options<AddServizioData, ThrowOnError>) {
        return (options?.client ?? client).post<AddServizioResponse, AddServizioError, ThrowOnError>({
            ...options,
            url: '/formazione/{idCampo}/servizi'
        });
    }
    
    public static getValutazione<ThrowOnError extends boolean = false>(options: Options<GetValutazioneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetValutazioneResponse, GetValutazioneError, ThrowOnError>({
            ...options,
            url: '/formazione/{idCampo}/{idCorso}/partecipanti/{idIscrizione}'
        });
    }
    
    public static deletePartecipante<ThrowOnError extends boolean = false>(options: Options<DeletePartecipanteData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeletePartecipanteResponse, DeletePartecipanteError, ThrowOnError>({
            ...options,
            url: '/formazione/{idCampo}/{idCorso}/partecipanti/{idIscrizione}'
        });
    }
    
    public static valutaPartecipante<ThrowOnError extends boolean = false>(options: Options<ValutaPartecipanteData, ThrowOnError>) {
        return (options?.client ?? client).patch<ValutaPartecipanteResponse, ValutaPartecipanteError, ThrowOnError>({
            ...options,
            url: '/formazione/{idCampo}/{idCorso}/partecipanti/{idIscrizione}'
        });
    }
    
    public static togglePresenza<ThrowOnError extends boolean = false>(options: Options<TogglePresenzaData, ThrowOnError>) {
        return (options?.client ?? client).patch<TogglePresenzaResponse, TogglePresenzaError, ThrowOnError>({
            ...options,
            url: '/formazione/{idCampo}/{idCorso}/partecipanti/{idIscrizione}/presenza'
        });
    }
    
    public static inserisciEsito<ThrowOnError extends boolean = false>(options: Options<InserisciEsitoData, ThrowOnError>) {
        return (options?.client ?? client).patch<InserisciEsitoResponse, InserisciEsitoError, ThrowOnError>({
            ...options,
            url: '/formazione/{idCampo}/{idCorso}/partecipanti/{idIscrizione}/esito'
        });
    }
    
    public static togglePresenzaServizi<ThrowOnError extends boolean = false>(options: Options<TogglePresenzaServiziData, ThrowOnError>) {
        return (options?.client ?? client).patch<TogglePresenzaServiziResponse, TogglePresenzaServiziError, ThrowOnError>({
            ...options,
            url: '/formazione/{idCampo}/servizi/{id}/presenza'
        });
    }
    
    public static setTipoServizio<ThrowOnError extends boolean = false>(options: Options<SetTipoServizioData, ThrowOnError>) {
        return (options?.client ?? client).patch<SetTipoServizioResponse, SetTipoServizioError, ThrowOnError>({
            ...options,
            url: '/formazione/{idCampo}/servizi/{idServizio}'
        });
    }
    
    public static selfTogglePresenza<ThrowOnError extends boolean = false>(options: Options<SelfTogglePresenzaData, ThrowOnError>) {
        return (options?.client ?? client).patch<SelfTogglePresenzaResponse, SelfTogglePresenzaError, ThrowOnError>({
            ...options,
            url: '/formazione/{idCampo}/presenza'
        });
    }
    
    public static updateCommento<ThrowOnError extends boolean = false>(options: Options<UpdateCommentoData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateCommentoResponse, UpdateCommentoError, ThrowOnError>({
            ...options,
            url: '/formazione/partecipanti/{id}/commento'
        });
    }
    
    public static getCorsoById<ThrowOnError extends boolean = false>(options: Options<GetCorsoByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetCorsoByIdResponse, GetCorsoByIdError, ThrowOnError>({
            ...options,
            url: '/formazione/{idCampo}/{idCorso}'
        });
    }
    
    public static getSchede<ThrowOnError extends boolean = false>(options: Options<GetSchedeData, ThrowOnError>) {
        return (options?.client ?? client).get<GetSchedeResponse, GetSchedeError, ThrowOnError>({
            ...options,
            url: '/formazione/{idCampo}/{idCorso}/schede'
        });
    }
    
    public static getBrevetti<ThrowOnError extends boolean = false>(options: Options<GetBrevettiData, ThrowOnError>) {
        return (options?.client ?? client).get<GetBrevettiResponse, GetBrevettiError, ThrowOnError>({
            ...options,
            url: '/formazione/{idCampo}/{idCorso}/brevetti'
        });
    }
    
    public static getPresenti<ThrowOnError extends boolean = false>(options: Options<GetPresentiData, ThrowOnError>) {
        return (options?.client ?? client).get<GetPresentiResponse, GetPresentiError, ThrowOnError>({
            ...options,
            url: '/formazione/{idCampo}/presenti'
        });
    }
    
    public static getPartecipantiVisibili<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetPartecipantiVisibiliResponse, GetPartecipantiVisibiliError, ThrowOnError>({
            ...options,
            url: '/formazione/partecipanti'
        });
    }
    
    public static getEquipe<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetEquipeResponse, GetEquipeError, ThrowOnError>({
            ...options,
            url: '/formazione/equipe'
        });
    }
    
    public static deleteStaffCorso<ThrowOnError extends boolean = false>(options: Options<DeleteStaffCorsoData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteStaffCorsoResponse, DeleteStaffCorsoError, ThrowOnError>({
            ...options,
            url: '/formazione/{id}/{idCorso}/staff/{idPersona}'
        });
    }
    
    public static deleteStaff<ThrowOnError extends boolean = false>(options: Options<DeleteStaffData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteStaffResponse, DeleteStaffError, ThrowOnError>({
            ...options,
            url: '/formazione/{id}/staff/{idPersona}'
        });
    }
    
    public static addServizio1<ThrowOnError extends boolean = false>(options: Options<AddServizio1Data, ThrowOnError>) {
        return (options?.client ?? client).delete<AddServizio1Response, AddServizio1Error, ThrowOnError>({
            ...options,
            url: '/formazione/{idCampo}/servizi/{id}'
        });
    }
    
}

export class TalentoControllerService {
    public static createTalento<ThrowOnError extends boolean = false>(options: Options<CreateTalentoData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateTalentoResponse, CreateTalentoError, ThrowOnError>({
            ...options,
            url: '/formazione/talenti/{id}'
        });
    }
    
    public static deleteTalento<ThrowOnError extends boolean = false>(options: Options<DeleteTalentoData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteTalentoResponse, DeleteTalentoError, ThrowOnError>({
            ...options,
            url: '/formazione/talenti/{id}'
        });
    }
    
    public static getTalenti<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetTalentiResponse, GetTalentiError, ThrowOnError>({
            ...options,
            url: '/formazione/talenti'
        });
    }
    
}

export class BatchEmailControllerService {
    public static sendBatchEmail<ThrowOnError extends boolean = false>(options: Options<SendBatchEmailData, ThrowOnError>) {
        return (options?.client ?? client).post<SendBatchEmailResponse, SendBatchEmailError, ThrowOnError>({
            ...options,
            url: '/email'
        });
    }
    
}

export class CensimentoControllerService {
    public static getCurrent<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetCurrentResponse, GetCurrentError, ThrowOnError>({
            ...options,
            url: '/censimento'
        });
    }
    
    public static createNew<ThrowOnError extends boolean = false>(options: Options<CreateNewData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateNewResponse, CreateNewError, ThrowOnError>({
            ...options,
            url: '/censimento'
        });
    }
    
    public static update1<ThrowOnError extends boolean = false>(options: Options<Update1Data, ThrowOnError>) {
        return (options?.client ?? client).patch<Update1Response, Update1Error, ThrowOnError>({
            ...options,
            url: '/censimento/{id}'
        });
    }
    
    public static approve<ThrowOnError extends boolean = false>(options: Options<ApproveData, ThrowOnError>) {
        return (options?.client ?? client).patch<ApproveResponse, ApproveError, ThrowOnError>({
            ...options,
            url: '/censimento/admin/{id}/approve'
        });
    }
    
    public static getPdf<ThrowOnError extends boolean = false>(options: Options<GetPdfData, ThrowOnError>) {
        return (options?.client ?? client).get<GetPdfResponse, GetPdfError, ThrowOnError>({
            ...options,
            url: '/censimento/{id}/pdf'
        });
    }
    
    public static getAll3<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetAll3Response, GetAll3Error, ThrowOnError>({
            ...options,
            url: '/censimento/admin'
        });
    }
    
}

export class AdminControllerService {
    public static rejectAdesione<ThrowOnError extends boolean = false>(options: Options<RejectAdesioneData, ThrowOnError>) {
        return (options?.client ?? client).patch<RejectAdesioneResponse, RejectAdesioneError, ThrowOnError>({
            ...options,
            url: '/admin/adesione/{id}/reject'
        });
    }
    
    public static approveAdesione<ThrowOnError extends boolean = false>(options: Options<ApproveAdesioneData, ThrowOnError>) {
        return (options?.client ?? client).patch<ApproveAdesioneResponse, ApproveAdesioneError, ThrowOnError>({
            ...options,
            url: '/admin/adesione/{id}/approve'
        });
    }
    
    public static getAllAdesioni<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetAllAdesioniResponse, GetAllAdesioniError, ThrowOnError>({
            ...options,
            url: '/admin/adesione'
        });
    }
    
}

export class TipoIncaricoControllerService {
    public static getAssignable<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetAssignableResponse, GetAssignableError, ThrowOnError>({
            ...options,
            url: '/tipoIncarico'
        });
    }
    
    public static getAll<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetAllResponse, GetAllError, ThrowOnError>({
            ...options,
            url: '/tipoIncarico/all'
        });
    }
    
}

export class StatsControllerService {
    public static getStatsBySezione<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetStatsBySezioneResponse, GetStatsBySezioneError, ThrowOnError>({
            ...options,
            url: '/stats/sezione'
        });
    }
    
    public static getGruppiStatsBySezione<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetGruppiStatsBySezioneResponse, GetGruppiStatsBySezioneError, ThrowOnError>({
            ...options,
            url: '/stats/sezione/gruppi'
        });
    }
    
    public static getStats<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetStatsResponse, GetStatsError, ThrowOnError>({
            ...options,
            url: '/stats/nazionale'
        });
    }
    
}

export class WebDavStorageServiceService {
    public static getRecentFiles<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetRecentFilesResponse, GetRecentFilesError, ThrowOnError>({
            ...options,
            url: '/nextcloud/recent'
        });
    }
    
}

export class GruppoControllerService {
    public static findVisible<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<FindVisibleResponse, FindVisibleError, ThrowOnError>({
            ...options,
            url: '/gruppo'
        });
    }
    
    public static findById2<ThrowOnError extends boolean = false>(options?: Options<FindById2Data, ThrowOnError>) {
        return (options?.client ?? client).get<FindById2Response, FindById2Error, ThrowOnError>({
            ...options,
            url: '/gruppo/{id}'
        });
    }
    
    public static getPersone<ThrowOnError extends boolean = false>(options?: Options<GetPersoneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetPersoneResponse, GetPersoneError, ThrowOnError>({
            ...options,
            url: '/gruppo/{id}/persone'
        });
    }
    
}

export class BrevettoControllerService {
    public static getById1<ThrowOnError extends boolean = false>(options: Options<GetById1Data, ThrowOnError>) {
        return (options?.client ?? client).get<GetById1Response, GetById1Error, ThrowOnError>({
            ...options,
            url: '/formazione/brevetti/{id}/scheda'
        });
    }
    
    public static getBrevettoById<ThrowOnError extends boolean = false>(options: Options<GetBrevettoByIdData, ThrowOnError>) {
        return (options?.client ?? client).get<GetBrevettoByIdResponse, GetBrevettoByIdError, ThrowOnError>({
            ...options,
            url: '/formazione/brevetti/{id}/brevetto'
        });
    }
    
}

export class SeedControllerService {
    public static seedData<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<SeedDataResponse, SeedDataError, ThrowOnError>({
            ...options,
            url: '/admin/seed'
        });
    }
    
}